#ifndef WEB_AUTOMATIONS_H
#define WEB_AUTOMATIONS_H
String getAutomationsPage(const String& username) {
  String inner;
  inner += "<h2>Automations</h2>";
  inner += "<p>Create schedules that run commands automatically. All authenticated users can view and interact with automations.</p>";

  // Create Automation form - separate container
  inner += "<div id='auto_form' style='background:#f8f9fa;border:1px solid #ddd;border-radius:8px;padding:1rem;margin:1rem 0'>";
  inner += "<style>\n"
           "#auto_form .row-inline{display:flex;align-items:center;gap:0.5rem;flex-wrap:wrap;}\n"
           "#auto_form .row-inline .input-tall{height:32px;line-height:32px;box-sizing:border-box;}\n"
           "#auto_form .row-inline .btn,#auto_form .row-inline .btn-small{height:32px;line-height:32px;padding:0 10px;display:inline-flex;align-items:center;margin:0;box-sizing:border-box;font-size:14px;}\n"
           "#auto_form input[type=time].input-tall{height:32px;line-height:32px;}\n"
           "#auto_form .row-inline input,#auto_form .row-inline select{margin:0;}\n"
           "</style>";
  inner += "<h3 style='margin-top:0;color:#000'>Create Automation</h3>";
  inner += "<div style='display:flex;flex-wrap:wrap;gap:0.5rem;align-items:center'>";
  inner += "<input id='a_name' class='input-tall' placeholder='Name' style='flex:1;min-width:160px'>";
  inner += "<select id='a_type' class='input-tall' onchange='autoTypeChanged()'>";
  inner += "  <option value='atTime'>At Time</option>";
  inner += "  <option value='afterDelay'>After Delay</option>";
  inner += "  <option value='interval'>Interval</option>";
  inner += "</select>";
  // atTime group
  inner += "<div id='grp_atTime'>";
  inner += "<div style='display:flex;flex-direction:column;gap:0.5rem'>";
  inner += "  <div class='row-inline'>";
  inner += "    <label style='font-size:0.9em;color:#000'>Repeat:</label>";
  inner += "    <select id='a_recur' class='input-tall' onchange='recurChanged()'>";
  inner += "      <option value='daily' selected>Daily</option>";
  inner += "      <option value='weekly'>Weekly</option>";
  inner += "      <option value='monthly'>Monthly</option>";
  inner += "      <option value='yearly'>Yearly</option>";
  inner += "    </select>";
  inner += "  </div>";
  inner += "  <div style='margin-top:0.5rem'>";
  inner += "    <label style='font-size:0.9em;color:#000;margin-bottom:0.25rem;display:block'>Times:</label>";
  inner += "    <div class='row-inline'>";
  inner += "      <input type='time' class='time-input input-tall' placeholder='HH:MM' style='width:120px;height:32px;line-height:32px'>";
  inner += "      <button id='btn_add_time' type='button' class='btn btn-small' onclick='addTimeField()' style='height:32px;line-height:32px;padding:0 10px;box-sizing:border-box;font-size:14px;display:inline-flex;align-items:center;margin:0'>+ Add Time</button>";
  inner += "      <button id='btn_remove_main_time' type='button' class='btn btn-small' onclick='removeMainTimeField()' style='height:32px;line-height:32px;padding:0 10px;box-sizing:border-box;font-size:14px;display:inline-flex;align-items:center;margin:0;visibility:hidden'>Remove</button>";
  inner += "    </div>";
  inner += "  </div>";
  inner += "  <div id='time_fields' style='margin-top:0.25rem'></div>";
  inner += "</div>";
  inner += "<div id='dow_wrap' style='display:none;flex-direction:column;gap:0.25rem;margin-top:0.5rem;color:#000;margin-left:0;padding-left:0'>";
  inner += "  <div style='display:flex;align-items:center;flex-wrap:wrap;margin:0'>";
  inner += "    <span style='font-size:0.9em;color:#000;margin:0;margin-right:1rem'>Days of week:</span>";
  inner += "    <label style='display:flex;align-items:center;gap:0;margin-right:2.5rem'><input type='checkbox' id='day_mon' value='mon' style='margin:0;padding:0;vertical-align:middle'><span style='display:inline-block;margin-left:-2px;font-kerning:none'>Mon</span></label>";
  inner += "    <label style='display:flex;align-items:center;gap:0;margin-right:2.5rem'><input type='checkbox' id='day_tue' value='tue' style='margin:0;padding:0;vertical-align:middle'><span style='display:inline-block;margin-left:-2px;font-kerning:none'>Tue</span></label>";
  inner += "    <label style='display:flex;align-items:center;gap:0;margin-right:2.5rem'><input type='checkbox' id='day_wed' value='wed' style='margin:0;padding:0;vertical-align:middle'><span style='display:inline-block;margin-left:-2px;font-kerning:none'>Wed</span></label>";
  inner += "    <label style='display:flex;align-items:center;gap:0;margin-right:2.5rem'><input type='checkbox' id='day_thu' value='thu' style='margin:0;padding:0;vertical-align:middle'><span style='display:inline-block;margin-left:-2px;font-kerning:none'>Thu</span></label>";
  inner += "    <label style='display:flex;align-items:center;gap:0;margin-right:2.5rem'><input type='checkbox' id='day_fri' value='fri' style='margin:0;padding:0;vertical-align:middle'><span style='display:inline-block;margin-left:-2px;font-kerning:none'>Fri</span></label>";
  inner += "    <label style='display:flex;align-items:center;gap:0;margin-right:2.5rem'><input type='checkbox' id='day_sat' value='sat' style='margin:0;padding:0;vertical-align:middle'><span style='display:inline-block;margin-left:-2px;font-kerning:none'>Sat</span></label>";
  inner += "    <label style='display:flex;align-items:center;gap:0;margin-right:0'><input type='checkbox' id='day_sun' value='sun' style='margin:0;padding:0;vertical-align:middle'><span style='display:inline-block;margin-left:-2px;font-kerning:none'>Sun</span></label>";
  inner += "  </div>";
  inner += "  </div>";
  inner += "</div>";
  inner += "</div>";

  // afterDelay group
  inner += "<div id='grp_afterDelay' class='vis-gone'>";
  inner += "<div class='row-inline' style='gap:0.3rem'>";
  inner += "  <input id='a_delay' class='input-tall' placeholder='Delay' style='width:160px'>";
  inner += "  <select id='a_delay_unit' class='input-tall'>";
  inner += "    <option value='ms' selected>ms</option>";
  inner += "    <option value='s'>seconds</option>";
  inner += "    <option value='min'>minutes</option>";
  inner += "    <option value='hr'>hours</option>";
  inner += "    <option value='day'>days</option>";
  inner += "  </select>";
  inner += "</div>";
  inner += "</div>";

  // interval group
  inner += "<div id='grp_interval' class='vis-gone row-inline' style='gap:0.3rem'>";
  inner += "  <input id='a_interval' class='input-tall' placeholder='Interval' style='width:160px'>";
  inner += "  <select id='a_interval_unit' class='input-tall'>";
  inner += "    <option value='ms' selected>ms</option>";
  inner += "    <option value='s'>seconds</option>";
  inner += "    <option value='min'>minutes</option>";
  inner += "    <option value='hr'>hours</option>";
  inner += "    <option value='day'>days</option>";
  inner += "  </select>";
  inner += "</div>";
  inner += "<div style='display:flex;flex-direction:column;gap:0.5rem'>";
  inner += "  <div style='display:flex;flex-direction:column;gap:0.5rem'>";
  inner += "    <div style='margin-top:0.5rem'>";
  inner += "      <label style='font-size:0.9em;color:#000;margin-bottom:0.25rem;display:block'>Commands & Logic:</label>";
  inner += "      <div id='command_fields' style='margin-top:0.25rem'>";
  inner += "        <div id='command_buttons' class='row-inline' style='gap:0.5rem;margin-top:0.5rem'>";
  inner += "        <button id='btn_add_cmd' type='button' class='btn btn-small' onclick='addCommandField()' title='Add another command to execute (e.g., ledcolor red, status, broadcast message)'>+ Add Command</button>";
  inner += "        <button id='btn_add_logic' type='button' class='btn btn-small' onclick='addLogicField()' title='Add conditional logic (IF/THEN statements for sensor-based automation)'>+ Add Logic</button>";
  inner += "        <button id='btn_add_wait' type='button' class='btn btn-small' onclick='addWaitField()' title='Add a wait/pause command with dropdown timing'>+ Add Wait</button>";
  inner += "      </div>";
  inner += "    </div>";
  inner += "    </div>";
  inner += "    <div style='margin-top:0.5rem'>";
  inner += "      <label style='font-size:0.9em;color:#000;margin-bottom:0.25rem;display:block'>Conditions (optional):</label>";
  inner += "      <div class='row-inline'>";
  inner += "        <input type='text' id='a_conditions' class='input-tall' placeholder='e.g., IF temp>75 THEN ledcolor red' style='flex:1;min-width:260px;height:32px;line-height:32px;padding:0 0.5rem;box-sizing:border-box'>";
  inner += "        <button id='btn_condition_help' type='button' class='btn btn-small' onclick='showConditionHelp()'>Help</button>";
  inner += "      </div>";
  inner += "      <div style='font-size:0.8em;color:#666;margin-top:0.25rem'>Examples: IF temp>75 THEN ledcolor red, IF time=morning THEN broadcast Good morning, IF motion=detected THEN status</div>";
  inner += "    </div>";
  inner += "    <div style='display:flex;align-items:center;gap:0.5rem;flex-wrap:wrap'>";
  inner += "      <label style='display:flex;align-items:center;gap:0;margin:0'><input id='a_enabled' type='checkbox' checked style='margin:0 -8px 0 6px;padding:0;vertical-align:middle;width:16px;height:16px'><span style='display:inline-block;margin-left:0;font-kerning:none;color:#000 !important;position:relative;left:16px'>Enabled</span></label>";
  inner += "    </div>";
  inner += "    <div style='margin-top:0.5rem'>";
  inner += "      <button class='btn' onclick='createAutomation()'>Add</button>";
  inner += "    </div>";
  inner += "  </div>";
  inner += "</div>";
  inner += "<div id='a_error' style='color:#b00;margin-top:0.5rem'></div>";
  inner += "</div>"; // Close Create Automation form

  // Download & Export header section
  inner += "<div style='background:#f8f9fa;border:1px solid #ddd;border-radius:8px 8px 0 0;padding:1rem;border-bottom:1px solid #ddd;margin:1rem 0 0 0'>";
  inner += "<div style='display:flex;gap:2rem;align-items:flex-start;flex-wrap:wrap'>";
  
  // Download section (left side)
  inner += "<div style='flex:1;min-width:300px'>";
  inner += "<h3 style='margin-top:0;color:#000'>Download from GitHub</h3>";
  inner += "<p style='margin:0.5rem 0;color:#666;font-size:0.9em'>Import automation scripts from GitHub repositories:</p>";
  inner += "<div style='display:flex;gap:0.5rem;align-items:center;flex-wrap:wrap;margin-bottom:0.5rem'>";
  inner += "<input type='text' id='github_url' placeholder='https://github.com/user/repo/blob/main/automation.json' style='flex:1;min-width:250px;padding:0.5rem;border:1px solid #ccc;border-radius:4px;font-size:0.9em'>";
  inner += "<input type='text' id='github_name' placeholder='Custom name (optional)' style='width:120px;padding:0.5rem;border:1px solid #ccc;border-radius:4px;font-size:0.9em'>";
  inner += "</div>";
  inner += "<div style='display:flex;gap:0.5rem;align-items:center;flex-wrap:wrap;margin-bottom:0.5rem'>";
  inner += "<button onclick='downloadFromGitHub()' class='btn'>Download</button>";
  inner += "<span onmouseover='showTooltip(this)' onmouseout='hideTooltip(this)' style='position:relative;margin-left:0.5rem;cursor:help;color:#007bff;font-size:0.8em;text-decoration:underline'>How to use";
  inner += "<div class='help-tooltip' style='position:absolute;bottom:100%;left:50%;transform:translateX(-50%);background:#333;color:white;padding:0.75rem;border-radius:6px;font-size:0.75em;z-index:1000;margin-bottom:8px;box-shadow:0 2px 8px rgba(0,0,0,0.3);width:280px;line-height:1.4;display:none'>";
  inner += "1. Go to GitHub repo with JSON files<br>";
  inner += "2. Click JSON file → Copy URL<br>";
  inner += "3. Paste URL and click Download<br>";
  inner += "<strong>Example:</strong> {\"name\":\"Test\",\"type\":\"atTime\",\"time\":\"07:00\"}";
  inner += "<div style='position:absolute;top:100%;left:50%;transform:translateX(-50%);border:6px solid transparent;border-top-color:#333'></div>";
  inner += "</div>";
  inner += "</span>";
  inner += "</div>";
  inner += "<div id='download_status' style='font-size:0.8em'></div>";
  inner += "</div>";
  
  // Export section (right side)
  inner += "<div style='flex:1;min-width:250px'>";
  inner += "<h3 style='margin-top:0;color:#000'>Export Automations</h3>";
  inner += "<p style='margin:0.5rem 0;color:#666;font-size:0.9em'>Download your automations as JSON backup files:</p>";
  inner += "<div style='display:flex;gap:0.5rem;align-items:center;flex-wrap:wrap;margin-bottom:0.5rem'>";
  inner += "<button onclick='exportAllAutomations()' class='btn'>Export All</button>";
  inner += "<label style='display:flex;align-items:center;gap:0.3rem;margin-left:0.5rem'>";
  inner += "<input type='checkbox' id='export_separate' style='margin:0;padding:0;vertical-align:middle'>";
  inner += "<span style='font-size:0.8em;color:#333'>Separate files</span>";
  inner += "</label>";
  inner += "</div>";
  inner += "<div style='font-size:0.8em;color:#666;margin-bottom:0.5rem'>";
  inner += "<span id='export_description'>Downloads all automations as single backup file</span>";
  inner += "</div>";
  inner += "<div id='export_status' style='font-size:0.8em'></div>";
  inner += "</div>";
  
  inner += "</div>";
  inner += "</div>";
  
  // Automations table - continuous with the download/export section
  inner += "<div style='background:#f8f9fa;border:1px solid #ddd;border-radius:0 0 8px 8px;padding:1rem;color:#333;border-top:none'>";
  inner += "<div id='autos'>Loading automations...</div>";
  inner += "</div>";
  

  inner += "<script>";
  inner += "try{console.log('[AUTO] Tooltip functions start');}catch(_){}";
  inner += "function showTooltip(element) { ";
  inner += "  const tooltip = element.querySelector('.help-tooltip'); ";
  inner += "  if (tooltip) tooltip.style.display = 'block'; ";
  inner += "}";
  inner += "function hideTooltip(element) { ";
  inner += "  const tooltip = element.querySelector('.help-tooltip'); ";
  inner += "  if (tooltip) tooltip.style.display = 'none'; ";
  inner += "}";
  inner += "try{console.log('[AUTO] Tooltip functions ready');}catch(_){}";
  inner += "</script>";

  inner += "<script>";
  inner += "try{console.log('[AUTO] Export functions start');}catch(_){}";
  inner += "function updateExportDescription() { ";
  inner += "  const checkbox = document.getElementById('export_separate'); ";
  inner += "  const desc = document.getElementById('export_description'); ";
  inner += "  if (checkbox && desc) { ";
  inner += "    desc.textContent = checkbox.checked ? 'Downloads each automation as separate file (GitHub-ready)' : 'Downloads all automations as single backup file'; ";
  inner += "  } ";
  inner += "}";
  inner += "try{console.log('[AUTO] Export functions ready');}catch(_){}";
  inner += "</script>";

  inner += "<script>";
  inner += "try{console.log('[AUTO] Window onload start');}catch(_){}";
  inner += "window.onload = function() { ";
  inner += "  try{ ";
  inner += "    autoTypeChanged(); ";
  inner += "  }catch(e){ ";
  inner += "    console.error('Error in autoTypeChanged on load:', e); ";
  inner += "  } ";
  inner += "  loadAutos(); ";
  inner += "  const exportCheckbox = document.getElementById('export_separate'); ";
  inner += "  if (exportCheckbox) { ";
  inner += "    exportCheckbox.addEventListener('change', updateExportDescription); ";
  inner += "  } ";
  inner += "};";
  inner += "try{console.log('[AUTO] Window onload ready');}catch(_){}";
  inner += "</script>";

  inner += "<script>";
  inner += "try{console.log('[AUTO] Type change functions start');}catch(_){}";
  inner += "function autoTypeChanged(){ ";
  inner += "  try { ";
  inner += "    var t=document.getElementById('a_type').value; ";
  inner += "    var g1=document.getElementById('grp_atTime'); ";
  inner += "    var g2=document.getElementById('grp_afterDelay'); ";
  inner += "    var g3=document.getElementById('grp_interval'); ";
  inner += "    console.log('autoTypeChanged: type=', t); ";
  inner += "    if(t==='atTime'){ ";
  inner += "      g1.classList.remove('vis-gone'); ";
  inner += "      g2.classList.add('vis-gone'); ";
  inner += "      g3.classList.add('vis-gone'); ";
  inner += "      recurChanged(); ";
  inner += "    } else if(t==='afterDelay'){ ";
  inner += "      g1.classList.add('vis-gone'); ";
  inner += "      g2.classList.remove('vis-gone'); ";
  inner += "      g3.classList.add('vis-gone'); ";
  inner += "    } else if(t==='interval'){ ";
  inner += "      g1.classList.add('vis-gone'); ";
  inner += "      g2.classList.add('vis-gone'); ";
  inner += "      g3.classList.remove('vis-gone'); ";
  inner += "    } ";
  inner += "  }catch(e){ ";
  inner += "    console.error('autoTypeChanged error:', e); ";
  inner += "  } ";
  inner += "}";
  inner += "function recurChanged(){ ";
  inner += "  try { ";
  inner += "    var r=document.getElementById('a_recur').value; ";
  inner += "    var dw=document.getElementById('dow_wrap'); ";
  inner += "    console.log('recurChanged: recur=', r); ";
  inner += "    if(!dw) return; ";
  inner += "    if(r==='weekly'){ ";
  inner += "      dw.style.display='flex'; ";
  inner += "    } else { ";
  inner += "      dw.style.display='none'; ";
  inner += "    } ";
  inner += "  }catch(e){ ";
  inner += "    console.error('recurChanged error:', e); ";
  inner += "  } ";
  inner += "}";
  inner += "try{console.log('[AUTO] Type change functions ready');}catch(_){}";
  inner += "</script>";
  
  inner += "<script>";
  inner += "try{console.log('[AUTO] Time field functions start');}catch(_){}";
  inner += "function addTimeField(){ ";
  inner += "  const container=document.getElementById('time_fields'); ";
  inner += "  const newField=document.createElement('div'); ";
  inner += "  newField.className='time-field row-inline'; ";
  inner += "  newField.style.cssText='gap:0.5rem;margin-bottom:0.3rem'; ";
  inner += "  newField.innerHTML='<input type=\"time\" class=\"time-input input-tall\" placeholder=\"HH:MM\" style=\"width:120px;height:32px;line-height:32px\"><button type=\"button\" class=\"btn btn-small\" onclick=\"removeTimeField(this)\" style=\"height:32px;line-height:32px;padding:0 10px;box-sizing:border-box;font-size:14px;display:inline-flex;align-items:center;margin:0\">Remove</button>'; ";
  inner += "  container.appendChild(newField); ";
  inner += "  updateTimeRemoveButtons(); ";
  inner += "  updateMainTimeRemove(); ";
  inner += "}";
  inner += "function removeTimeField(btn){ ";
  inner += "  btn.parentElement.remove(); ";
  inner += "  updateTimeRemoveButtons(); ";
  inner += "  updateMainTimeRemove(); ";
  inner += "}";
  inner += "function removeMainTimeField(){ ";
  inner += "  const mainInput=document.querySelector('#grp_atTime .time-input'); ";
  inner += "  const additionalFields=document.querySelectorAll('.time-field'); ";
  inner += "  if(additionalFields.length>0){ ";
  inner += "    const firstAdditional=additionalFields[0]; ";
  inner += "    const firstAdditionalInput=firstAdditional.querySelector('.time-input'); ";
  inner += "    if(firstAdditionalInput){ ";
  inner += "      mainInput.value=firstAdditionalInput.value; ";
  inner += "      firstAdditional.remove(); ";
  inner += "    } ";
  inner += "  } else { ";
  inner += "    mainInput.value=''; ";
  inner += "  } ";
  inner += "  updateTimeRemoveButtons(); ";
  inner += "  updateMainTimeRemove(); ";
  inner += "}";
  inner += "function updateTimeRemoveButtons(){ ";
  inner += "  const fields=document.querySelectorAll('.time-field'); ";
  inner += "  const allTimeInputs=document.querySelectorAll('.time-input'); ";
  inner += "  const totalTimeFields=allTimeInputs.length; ";
  inner += "  fields.forEach((field,idx)=>{ ";
  inner += "    const btn=field.querySelector('button'); ";
  inner += "    if(totalTimeFields<=1){ ";
  inner += "      btn.style.visibility='hidden'; ";
  inner += "    } else { ";
  inner += "      btn.style.visibility='visible'; ";
  inner += "    } ";
  inner += "  }); ";
  inner += "}";
  inner += "function updateMainTimeRemove(){ ";
  inner += "  const allTimeInputs=document.querySelectorAll('.time-input'); ";
  inner += "  const mainRemoveBtn=document.querySelector('#btn_remove_main_time'); ";
  inner += "  if(mainRemoveBtn){ ";
  inner += "    if(allTimeInputs.length<=1){ ";
  inner += "      mainRemoveBtn.style.visibility='hidden'; ";
  inner += "    } else { ";
  inner += "      mainRemoveBtn.style.visibility='visible'; ";
  inner += "    } ";
  inner += "  } ";
  inner += "}";
  inner += "try{console.log('[AUTO] Time field functions ready');}catch(_){}";
  inner += "</script>";

  inner += "<script>";
  inner += "try{console.log('[AUTO] Command field functions start');}catch(_){}";
  inner += "function addWaitField(){ ";
  inner += "  const container=document.getElementById('command_fields'); ";
  inner += "  const buttonsDiv=document.getElementById('command_buttons'); ";
  inner += "  const div=document.createElement('div'); ";
  inner += "  div.className='wait-field row-inline'; ";
  inner += "  div.style.cssText='gap:0.5rem;margin-bottom:0.3rem;align-items:center'; ";
  inner += "  const waitSpan=document.createElement('span'); ";
  inner += "  waitSpan.style.cssText='font-size:0.9em;color:#000;margin-right:0.3rem;font-weight:500'; ";
  inner += "  waitSpan.textContent='wait'; ";
  inner += "  const msSelect=document.createElement('select'); ";
  inner += "  msSelect.className='wait-ms-select input-tall'; ";
  inner += "  msSelect.style.cssText='height:32px;width:120px'; ";
  inner += "  msSelect.innerHTML='<option value=\"100\">100 ms</option><option value=\"200\" selected>200 ms</option><option value=\"300\">300 ms</option><option value=\"400\">400 ms</option><option value=\"500\">500 ms</option><option value=\"600\">600 ms</option><option value=\"700\">700 ms</option><option value=\"800\">800 ms</option><option value=\"900\">900 ms</option><option value=\"1000\">1000 ms</option><option value=\"1500\">1500 ms</option><option value=\"2000\">2000 ms</option><option value=\"3000\">3000 ms</option><option value=\"5000\">5000 ms</option>'; ";
  inner += "  const removeBtn=document.createElement('button'); ";
  inner += "  removeBtn.type='button'; ";
  inner += "  removeBtn.className='btn btn-small'; ";
  inner += "  removeBtn.textContent='Remove'; ";
  inner += "  removeBtn.style.cssText='height:32px;padding:0 10px;margin-left:0.3rem'; ";
  inner += "  removeBtn.onclick=function(){ removeWaitField(this); }; ";
  inner += "  div.appendChild(waitSpan); ";
  inner += "  div.appendChild(msSelect); ";
  inner += "  div.appendChild(removeBtn); ";
  inner += "  container.insertBefore(div, buttonsDiv); ";
  inner += "  updateWaitRemoveButtons(); ";
  inner += "}";
  inner += "function removeWaitField(btn){ ";
  inner += "  btn.parentElement.remove(); ";
  inner += "  updateWaitRemoveButtons(); ";
  inner += "}";
  inner += "function updateWaitRemoveButtons(){ ";
  inner += "  const wfields=document.querySelectorAll('.wait-field'); ";
  inner += "  wfields.forEach((field,idx)=>{ ";
  inner += "    const btn=field.querySelector('button'); ";
  inner += "    if(wfields.length<=1){ ";
  inner += "      btn.style.visibility='hidden'; ";
  inner += "    } else { ";
  inner += "      btn.style.visibility='visible'; ";
  inner += "    } ";
  inner += "  }); ";
  inner += "}";
  inner += "function updateCommandRemoveButtons(){ ";
  inner += "  const cfields=document.querySelectorAll('.cmd-field'); ";
  inner += "  const allCmdInputs=document.querySelectorAll('.cmd-input'); ";
  inner += "  const totalCmdFields=allCmdInputs.length; ";
  inner += "  cfields.forEach((field,idx)=>{ ";
  inner += "    const btn=field.querySelector('button[onclick*=\"removeCommandField\"]'); ";
  inner += "    if(totalCmdFields<=1){ ";
  inner += "      btn.style.visibility='hidden'; ";
  inner += "    } else { ";
  inner += "      btn.style.visibility='visible'; ";
  inner += "    } ";
  inner += "  }); ";
  inner += "}";
  inner += "function addCommandField(){ ";
  inner += "  const container=document.getElementById('command_fields'); ";
  inner += "  const buttonsDiv=document.getElementById('command_buttons'); ";
  inner += "  const div=document.createElement('div'); ";
  inner += "  div.className='cmd-field row-inline'; ";
  inner += "  div.style.cssText='gap:0.5rem;margin-bottom:0.3rem'; ";
  inner += "  div.innerHTML='<input type=\"text\" class=\"cmd-input input-tall\" placeholder=\"Command to run\" style=\"flex:1;min-width:260px;height:32px;line-height:32px;padding:0 0.5rem;box-sizing:border-box\"><button type=\"button\" class=\"btn btn-small\" onclick=\"removeCommandField(this)\" style=\"height:32px;line-height:32px;padding:0 10px;box-sizing:border-box;font-size:14px;display:inline-flex;align-items:center;margin:0\">Remove</button>'; ";
  inner += "  container.insertBefore(div, buttonsDiv); ";
  inner += "  updateCommandRemoveButtons(); ";
  inner += "}";
  inner += "function removeCommandField(btn){ ";
  inner += "  btn.parentElement.remove(); ";
  inner += "  updateCommandRemoveButtons(); ";
  inner += "}";
  inner += "try{console.log('[AUTO] Command field functions ready');}catch(_){}";
  inner += "try{console.log('[AUTO] Wait field functions ready');}catch(_){}";
  inner += "</script>";

  inner += "<script>";
  inner += "try{console.log('[AUTO] Logic field functions start');}catch(_){}";
  inner += "function addLogicField(){ ";
  inner += "  const container=document.getElementById('command_fields'); ";
  inner += "  const buttonsDiv=document.getElementById('command_buttons'); ";
  inner += "  const newField=document.createElement('div'); ";
  inner += "  newField.className='logic-field row-inline'; ";
  inner += "  newField.style.cssText='gap:0.5rem;margin-bottom:0.3rem;align-items:center;flex-wrap:wrap'; ";
  inner += "  const typeSelect = document.createElement('select'); ";
  inner += "  typeSelect.className = 'logic-type input-tall'; ";
  inner += "  typeSelect.style.cssText = 'height:32px;margin-right:0.3rem'; ";
  inner += "  typeSelect.onchange = function() { updateLogicField(this); }; ";
  inner += "  typeSelect.innerHTML = '<option value=\"IF\">IF</option><option value=\"ELSE IF\">ELSE IF</option><option value=\"ELSE\">ELSE</option>'; ";
  inner += "  const varSelect = document.createElement('select'); ";
  inner += "  varSelect.className = 'logic-var input-tall'; ";
  inner += "  varSelect.style.cssText = 'height:32px'; ";
  inner += "  varSelect.title = 'Choose which sensor or value to check'; ";
  inner += "  varSelect.innerHTML = '<option value=\"temp\">Temperature</option><option value=\"distance\">Distance</option><option value=\"light\">Light</option><option value=\"motion\">Motion</option><option value=\"time\">Time</option>'; ";
  inner += "  const opSelect = document.createElement('select'); ";
  inner += "  opSelect.className = 'logic-operator input-tall'; ";
  inner += "  opSelect.style.cssText = 'height:32px;width:60px'; ";
  inner += "  opSelect.innerHTML = '<option value=\">\">></option><option value=\"<\"><</option><option value=\"=\">=</option><option value=\">=\">>=</option><option value=\"<=\"><=</option><option value=\"!=\">!=</option>'; ";
  inner += "  const valueInput = document.createElement('input'); ";
  inner += "  valueInput.type = 'text'; ";
  inner += "  valueInput.className = 'logic-value input-tall'; ";
  inner += "  valueInput.placeholder = '75'; ";
  inner += "  valueInput.style.cssText = 'width:80px;height:32px'; ";
  inner += "  const thenSpan = document.createElement('span'); ";
  inner += "  thenSpan.className = 'then-text'; ";
  inner += "  thenSpan.style.cssText = 'font-size:0.9em;color:#000;margin:0 0.3rem'; ";
  inner += "  thenSpan.textContent = 'THEN'; ";
  inner += "  const actionInput = document.createElement('input'); ";
  inner += "  actionInput.type = 'text'; ";
  inner += "  actionInput.className = 'logic-action input-tall'; ";
  inner += "  actionInput.placeholder = 'ledcolor red'; ";
  inner += "  actionInput.style.cssText = 'flex:1;min-width:120px;height:32px'; ";
  inner += "  const removeBtn = document.createElement('button'); ";
  inner += "  removeBtn.type = 'button'; ";
  inner += "  removeBtn.className = 'btn btn-small'; ";
  inner += "  removeBtn.textContent = 'Remove'; ";
  inner += "  removeBtn.style.cssText = 'height:32px;padding:0 10px;margin-left:0.3rem'; ";
  inner += "  removeBtn.onclick = function() { removeLogicField(this); }; ";
  inner += "  newField.appendChild(typeSelect); ";
  inner += "  newField.appendChild(varSelect); ";
  inner += "  newField.appendChild(opSelect); ";
  inner += "  newField.appendChild(valueInput); ";
  inner += "  newField.appendChild(thenSpan); ";
  inner += "  newField.appendChild(actionInput); ";
  inner += "  newField.appendChild(removeBtn); ";
  inner += "  container.insertBefore(newField, buttonsDiv); ";
  inner += "  console.log('Logic field added successfully'); ";
  inner += "}";
  inner += "function removeLogicField(btn){ ";
  inner += "  btn.parentElement.remove(); ";
  inner += "}";
  inner += "function updateLogicField(selectElement){ ";
  inner += "  try { ";
  inner += "    const field=selectElement.parentElement; ";
  inner += "    const logicType=selectElement.value; ";
  inner += "    console.log('updateLogicField: type=', logicType); ";
  inner += "    const varSelect=field.querySelector('.logic-var'); ";
  inner += "    const operatorSelect=field.querySelector('.logic-operator'); ";
  inner += "    const valueInput=field.querySelector('.logic-value'); ";
  inner += "    const thenText=field.querySelector('.then-text'); ";
  inner += "    ";
  inner += "    if(logicType==='ELSE'){ ";
  inner += "      varSelect.style.display='none'; ";
  inner += "      operatorSelect.style.display='none'; ";
  inner += "      valueInput.style.display='none'; ";
  inner += "      thenText.style.display='none'; ";
  inner += "      console.log('Logic field set to ELSE mode - condition fields hidden'); ";
  inner += "    } else { ";
  inner += "      varSelect.style.display='inline-block'; ";
  inner += "      operatorSelect.style.display='inline-block'; ";
  inner += "      valueInput.style.display='inline-block'; ";
  inner += "      thenText.style.display='inline-block'; ";
  inner += "      console.log('Logic field set to', logicType, 'mode - condition fields shown'); ";
  inner += "    } ";
  inner += "  } catch(e) { ";
  inner += "    console.error('updateLogicField error:', e); ";
  inner += "  } ";
  inner += "}";
  inner += "try{console.log('[AUTO] Logic field functions ready');}catch(_){}";
  inner += "</script>";

  inner += "<script>";
  inner += "try{console.log('[AUTO] Utility functions start');}catch(_){}";
  inner += "function human(v){ ";
  inner += "  if(v===null||v===undefined) return '\\u2014'; ";
  inner += "  if(typeof v==='boolean') return v?'Yes':'No'; ";
  inner += "  return ''+v; ";
  inner += "}";
  inner += "function formatNextRun(nextAt){ ";
  inner += "  if(!nextAt || nextAt === null) return '\u2014'; ";
  inner += "  try { ";
  inner += "    const now = Math.floor(Date.now()/1000); ";
  inner += "    const next = parseInt(nextAt); ";
  inner += "    if(isNaN(next) || next <= 0) return '\u2014'; ";
  inner += "    const date = new Date(next * 1000); ";
  inner += "    const timeStr = date.toLocaleString(); ";
  inner += "    const diffSec = next - now; ";
  inner += "    let relativeStr = ''; ";
  inner += "    if(diffSec <= 0){ ";
  inner += "      relativeStr = 'overdue'; ";
  inner += "    } else if(diffSec < 60){ ";
  inner += "      relativeStr = 'in ' + diffSec + 's'; ";
  inner += "    } else if(diffSec < 3600){ ";
  inner += "      relativeStr = 'in ' + Math.floor(diffSec/60) + 'm'; ";
  inner += "    } else if(diffSec < 86400){ ";
  inner += "      relativeStr = 'in ' + Math.floor(diffSec/3600) + 'h'; ";
  inner += "    } else { ";
  inner += "      relativeStr = 'in ' + Math.floor(diffSec/86400) + 'd'; ";
  inner += "    } ";
  inner += "    return timeStr + '<br><small style=\"color:#666\">' + relativeStr + '</small>'; ";
  inner += "  } catch(e){ ";
  inner += "    return '\u2014'; ";
  inner += "  } ";
  inner += "}";
  inner += "try{console.log('[AUTO] Utility functions ready');}catch(_){}";
  inner += "</script>";

  inner += "<script>";
  inner += "try{console.log('[AUTO] Render functions start');}catch(_){}";
  inner += "function renderAutos(json) {";
  inner += "  try {";
  inner += "    let data = (typeof json === 'string') ? JSON.parse(json) : json;";
  inner += "    let autos = [];";
  inner += "    if (data && data.automations && Array.isArray(data.automations)) autos = data.automations;";
  inner += "    ";
  inner += "    let html = '<table style=\"width:100%;border-collapse:collapse\">';";
  inner += "    html += '<tr style=\"background:#e9ecef\"><th style=\"padding:0.5rem;text-align:left\">ID</th><th style=\"padding:0.5rem;text-align:left\">Name</th><th style=\"padding:0.5rem;text-align:left\">Enabled</th><th style=\"padding:0.5rem;text-align:left\">Type</th><th style=\"padding:0.5rem;text-align:left\">Summary</th><th style=\"padding:0.5rem;text-align:left\">Next Run</th><th style=\"padding:0.5rem\">Actions</th></tr>';";
  inner += "    ";
  inner += "    if (autos.length === 0) {";
  inner += "      html += '<tr><td colspan=\"7\" style=\"padding:2rem;text-align:center;color:#666;font-style:italic\">No automations yet. Create your first automation above!</td></tr>';";
  inner += "    } else {";
  inner += "      autos.forEach(a => {";
  inner += "        let name = a.name || '(unnamed)';";
  inner += "        let enabled = (a.enabled === true ? 'Yes' : 'No');";
  inner += "        let t = (a.type || '').toLowerCase();";
  inner += "        let type = a.type || human(a.type);";
  inner += "        let summary = '';";
  inner += "        ";
  inner += "        if (t === 'attime') {";
  inner += "          summary = 'At ' + (a.time || '?') + (a.days ? ' on ' + a.days : '');";
  inner += "        } else if (t === 'afterdelay') {";
  inner += "          summary = 'After ' + (a.delayMs || '?') + ' ms';";
  inner += "        } else if (t === 'interval') {";
  inner += "          summary = 'Every ' + (a.intervalMs || '?') + ' ms';";
  inner += "        } else {";
  inner += "          summary = '\\u2014';";
  inner += "        }";
  inner += "        ";
  inner += "        if (Array.isArray(a.commands) && a.commands.length) {";
  inner += "          summary += ' | cmds: ' + a.commands.join('; ');";
  inner += "        } else if (a.command) {";
  inner += "          summary += ' | cmd: ' + a.command;";
  inner += "        }";
  inner += "        ";
  inner += "        if (a.conditions && a.conditions.trim()) {";
  inner += "          summary += ' | conditions: ' + a.conditions;";
  inner += "        }";
  inner += "        ";
  inner += "        let nextRun = formatNextRun(a.nextAt);";
  inner += "        let id = (typeof a.id !== 'undefined') ? a.id : '';";
  inner += "        let btns = '';";
  inner += "        ";
  inner += "        if (id !== '') {";
  inner += "          if (a.enabled === true) {";
  inner += "            btns += '<button class=\"btn\" onclick=\"autoToggle(' + id + ',0)\" style=\"margin-right:0.3rem\">Disable</button>';";
  inner += "          } else {";
  inner += "            btns += '<button class=\"btn\" onclick=\"autoToggle(' + id + ',1)\" style=\"margin-right:0.3rem\">Enable</button>';";
  inner += "          }";
  inner += "          btns += '<button class=\"btn\" onclick=\"autoRun(' + id + ')\" style=\"margin-right:0.3rem\">Run</button>';";
  inner += "          btns += '<button class=\"btn\" onclick=\"autoDelete(' + id + ')\" style=\"margin-right:0.3rem;color:#b00\">Delete</button>';";
  inner += "          btns += '<button class=\"btn\" onclick=\"exportSingleAutomation(' + id + ')\" style=\"margin-right:0.3rem\">Export</button>';";
  inner += "        }";
  inner += "        ";
  inner += "        html += '<tr style=\"border-bottom:1px solid #ddd\">';";
  inner += "        html += '<td style=\"padding:0.5rem\">' + id + '</td>';";
  inner += "        html += '<td style=\"padding:0.5rem\">' + name + '</td>';";
  inner += "        html += '<td style=\"padding:0.5rem\">' + enabled + '</td>';";
  inner += "        html += '<td style=\"padding:0.5rem\">' + type + '</td>';";
  inner += "        html += '<td style=\"padding:0.5rem\">' + summary + '</td>';";
  inner += "        html += '<td style=\"padding:0.5rem\">' + nextRun + '</td>';";
  inner += "        html += '<td style=\"padding:0.5rem\">' + btns + '</td>';";
  inner += "        html += '</tr>';";
  inner += "      });";
  inner += "    }";
  inner += "    ";
  inner += "    html += '</table>';";
  inner += "    document.getElementById('autos').innerHTML = html;";
  inner += "  } catch (e) {";
  inner += "    document.getElementById('autos').innerHTML = 'Error parsing automations: ' + e.message;";
  inner += "  }";
  inner += "}";
  inner += "function loadAutos(){ ";
  inner += "  fetch('/api/automations').then(r => { ";
  inner += "    if(r.ok) return r.text(); ";
  inner += "    else throw new Error('HTTP '+r.status); ";
  inner += "  }).then(txt => { ";
  inner += "    renderAutos(txt); ";
  inner += "  }).catch(e => { ";
  inner += "    document.getElementById('autos').innerHTML = 'Error loading automations: ' + e.message; ";
  inner += "  }); ";
  inner += "}";
  // CLI helpers via /api/cli
  inner += "function postCLI(cmd){ ";
  inner += "  return fetch('/api/cli',{";
  inner += "    method:'POST',";
  inner += "    headers:{'Content-Type':'application/x-www-form-urlencoded'},";
  inner += "    body:'cmd='+encodeURIComponent(cmd)";
  inner += "  }).then(r=>r.text()); ";
  inner += "}";
  inner += "function postCLIValidate(cmd){ ";
  inner += "  return fetch('/api/cli',{";
  inner += "    method:'POST',";
  inner += "    headers:{'Content-Type':'application/x-www-form-urlencoded'},";
  inner += "    body:'cmd='+encodeURIComponent(cmd)+'&validate=1'";
  inner += "  }).then(r=>r.text()); ";
  inner += "}";
  inner += "async function createAutomation(){ ";
  inner += "  const name=document.getElementById('a_name').value.trim(); ";
  inner += "  const type=document.getElementById('a_type').value; ";
  inner += "  const delayRaw=document.getElementById('a_delay').value.trim(); ";
  inner += "  const delayUnit=(document.getElementById('a_delay_unit')?document.getElementById('a_delay_unit').value:'ms'); ";
  inner += "  const intervalRaw=document.getElementById('a_interval').value.trim(); ";
  inner += "  const intervalUnit=(document.getElementById('a_interval_unit')?document.getElementById('a_interval_unit').value:'ms'); ";
  inner += "  const conditions=document.getElementById('a_conditions').value.trim(); ";
  inner += "  const en=document.getElementById('a_enabled').checked; ";
  inner += "  document.getElementById('a_error').textContent=''; ";
  inner += "  const recur=(document.getElementById('a_recur')?document.getElementById('a_recur').value:'daily'); ";
  inner += "  if(type==='atTime'&&(recur==='monthly'||recur==='yearly')){ ";
  inner += "    document.getElementById('a_error').textContent='Monthly/Yearly repeats are not supported yet.'; ";
  inner += "    return; ";
  inner += "  } ";
  inner += "  const selectedDays=[]; ";
  inner += "  if(type==='atTime'&&recur==='weekly'){ ";
  inner += "    ['mon','tue','wed','thu','fri','sat','sun'].forEach(day=>{ ";
  inner += "      if(document.getElementById('day_'+day).checked) selectedDays.push(day); ";
  inner += "    }); ";
  inner += "    if(selectedDays.length===0){ ";
  inner += "      document.getElementById('a_error').textContent='Please select at least one day for a weekly schedule.'; ";
  inner += "      return; ";
  inner += "    } ";
  inner += "  } ";
  inner += "  const days=selectedDays.join(','); ";
  inner += "  const timeInputs=document.querySelectorAll('.time-input'); ";
  inner += "  const times=[]; ";
  inner += "  timeInputs.forEach(input=>{ ";
  inner += "    const val=input.value.trim(); ";
  inner += "    if(val) times.push(val); ";
  inner += "  }); ";
  inner += "  const cmdInputs=document.querySelectorAll('.cmd-input'); ";
  inner += "  const cmds=[]; ";
  inner += "  cmdInputs.forEach(inp=>{ ";
  inner += "    const v=inp.value.trim(); ";
  inner += "    if(v) cmds.push(v); ";
  inner += "  }); ";
  inner += "  const waitFields=document.querySelectorAll('.wait-field'); ";
  inner += "  waitFields.forEach(field=>{ ";
  inner += "    const select=field.querySelector('.wait-ms-select'); ";
  inner += "    if(select){ ";
  inner += "      const ms=select.value; ";
  inner += "      if(ms) cmds.push('wait '+ms); ";
  inner += "    } ";
  inner += "  }); ";
  inner += "  const logicFields=document.querySelectorAll('.logic-field'); ";
  inner += "  const conditionalChain=[]; ";
  inner += "  logicFields.forEach(field=>{ ";
  inner += "    const typeSelect=field.querySelector('.logic-type'); ";
  inner += "    const varSelect=field.querySelector('.logic-var'); ";
  inner += "    const operatorSelect=field.querySelector('.logic-operator'); ";
  inner += "    const value=field.querySelector('.logic-value'); ";
  inner += "    const action=field.querySelector('.logic-action'); ";
  inner += "    if(typeSelect && action){ ";
  inner += "      const typeVal=typeSelect.value; ";
  inner += "      const actVal=action.value.trim(); ";
  inner += "      if(typeVal && actVal){ ";
  inner += "        if(typeVal==='ELSE'){ ";
  inner += "          conditionalChain.push(typeVal+' '+actVal); ";
  inner += "        } else if(varSelect && operatorSelect && value){ ";
  inner += "          const varVal=varSelect.value; ";
  inner += "          const opVal=operatorSelect.value; ";
  inner += "          const valVal=value.value.trim(); ";
  inner += "          if(varVal && opVal && valVal){ ";
  inner += "            conditionalChain.push(typeVal+' '+varVal+opVal+valVal+' THEN '+actVal); ";
  inner += "          } ";
  inner += "        } ";
  inner += "      } ";
  inner += "    } ";
  inner += "  }); ";
  inner += "  if(conditionalChain.length>0){ ";
  inner += "    cmds.push(conditionalChain.join(' ')); ";
  inner += "  } ";
  inner += "  const cmdsParam=cmds.join(';'); ";
  inner += "  const buildParts=(time,idx)=>{ ";
  inner += "    let parts=['automation add']; ";
  inner += "    parts.push('name='+name+(time!==null && times.length>1?' #'+(idx+1):'')); ";
  inner += "    parts.push('type='+type); ";
  inner += "    if(time) parts.push('time='+time); ";
  inner += "    if(type==='atTime'){ ";
  inner += "      parts.push('recurrence='+recur); ";
  inner += "      if(days) parts.push('days='+days); ";
  inner += "    } ";
  inner += "    if(delayRaw){ ";
  inner += "      let n=parseFloat(delayRaw); ";
  inner += "      if(!isNaN(n)&&n>=0){ ";
  inner += "        let mult=1; ";
  inner += "        if(delayUnit==='s') mult=1000; ";
  inner += "        else if(delayUnit==='min') mult=60000; ";
  inner += "        else if(delayUnit==='hr') mult=3600000; ";
  inner += "        else if(delayUnit==='day') mult=86400000; ";
  inner += "        const delayMs=Math.floor(n*mult); ";
  inner += "        parts.push('delayms='+delayMs); ";
  inner += "      } ";
  inner += "    } ";
  inner += "    if(intervalRaw){ ";
  inner += "      let n=parseFloat(intervalRaw); ";
  inner += "      if(!isNaN(n)&&n>=0){ ";
  inner += "        let mult=1; ";
  inner += "        if(intervalUnit==='s') mult=1000; ";
  inner += "        else if(intervalUnit==='min') mult=60000; ";
  inner += "        else if(intervalUnit==='hr') mult=3600000; ";
  inner += "        else if(intervalUnit==='day') mult=86400000; ";
  inner += "        const intervalMs=Math.floor(n*mult); ";
  inner += "        parts.push('intervalms='+intervalMs); ";
  inner += "      } ";
  inner += "    } ";
  inner += "    parts.push('commands='+cmdsParam); ";
  inner += "    if(conditions) parts.push('conditions='+conditions); ";
  inner += "    parts.push('enabled='+(en?1:0)); ";
  inner += "    return parts.join(' '); ";
  inner += "  }; ";
  inner += "  const fullCmds=(times.length?times:[null]).map((t,idx)=>buildParts(t,idx)); ";
  inner += "  if(conditionalChain.length>0){ ";
  inner += "    const chainStr=conditionalChain.join(' '); ";
  inner += "    const validationResult=await postCLIValidate('validate-conditions '+chainStr); ";
  inner += "    if(validationResult!=='VALID'){ ";
  inner += "      document.getElementById('a_error').textContent=validationResult; ";
  inner += "      return; ";
  inner += "    } ";
  inner += "  } ";
  inner += "  Promise.all(fullCmds.map(c=>postCLIValidate(c))).then(vals=>{ ";
  inner += "    for(let i=0;i<vals.length;i++){ ";
  inner += "      const v=(vals[i]||'').trim(); ";
  inner += "      if(v!=='VALID'){ ";
  inner += "        document.getElementById('a_error').textContent=v; ";
  inner += "        throw new Error('Invalid'); ";
  inner += "      } ";
  inner += "    } ";
  inner += "    return Promise.all(fullCmds.map(c=>postCLI(c))); ";
  inner += "  }).then(results=>{ ";
  inner += "    const err=results.find(t=>t.toLowerCase().indexOf('error:')>=0); ";
  inner += "    if(err){ ";
  inner += "      document.getElementById('a_error').textContent=err; ";
  inner += "      return; ";
  inner += "    } ";
  inner += "    document.getElementById('a_name').value=''; ";
  inner += "    document.querySelectorAll('.time-input').forEach(input=>input.value=''); ";
  inner += "    ['mon','tue','wed','thu','fri','sat','sun'].forEach(day=>{ ";
  inner += "      let el=document.getElementById('day_'+day); ";
  inner += "      if(el) el.checked=false; ";
  inner += "    }); ";
  inner += "    document.getElementById('a_delay').value=''; ";
  inner += "    document.getElementById('a_interval').value=''; ";
  inner += "    document.getElementById('a_conditions').value=''; ";
  inner += "    const cwrap=document.getElementById('command_fields'); ";
  inner += "    if(cwrap){ ";
  inner += "      cwrap.innerHTML='<div id=\"command_buttons\" class=\"row-inline\" style=\"gap:0.5rem;margin-top:0.5rem\"><button id=\"btn_add_cmd\" type=\"button\" class=\"btn btn-small\" onclick=\"addCommandField()\" title=\"Add another command to execute (e.g., ledcolor red, status, broadcast message)\">+ Add Command</button><button id=\"btn_add_logic\" type=\"button\" class=\"btn btn-small\" onclick=\"addLogicField()\" title=\"Add conditional logic (IF/THEN statements for sensor-based automation)\">+ Add Logic</button><button id=\"btn_add_wait\" type=\"button\" class=\"btn btn-small\" onclick=\"addWaitField()\" title=\"Add a wait/pause command with dropdown timing\">+ Add Wait</button></div>'; ";
  inner += "    } ";
  inner += "    loadAutos(); ";
  inner += "  }).catch(e=>{ ";
  inner += "    if(!document.getElementById('a_error').textContent){ ";
  inner += "      document.getElementById('a_error').textContent='Validation error: '+e.message; ";
  inner += "    } ";
  inner += "  }); ";
  inner += "}";
  inner += "function showConditionHelp(){ ";
  inner += "  var helpText = 'Condition Examples:\\n\\n'; ";
  inner += "  helpText += 'Simple Conditions:\\n'; ";
  inner += "  helpText += '• IF temp>75 THEN ledcolor red\\n'; ";
  inner += "  helpText += '• IF distance<100 THEN broadcast Object nearby\\n'; ";
  inner += "  helpText += '• IF motion=detected THEN status\\n\\n'; ";
  inner += "  helpText += 'Conditional Chains:\\n'; ";
  inner += "  helpText += '• IF temp>80 THEN ledcolor red ELSE ledcolor blue\\n'; ";
  inner += "  helpText += '• IF temp>80 THEN ledcolor red ELSE IF temp>60 THEN ledcolor yellow ELSE ledcolor green\\n'; ";
  inner += "  helpText += '• IF time=morning THEN broadcast Good morning ELSE IF time=evening THEN ledcolor blue ELSE ledcolor off\\n\\n'; ";
  inner += "  helpText += 'Supported Sensors: temp, humidity, motion, distance, light, time\\n'; ";
  inner += "  helpText += 'Supported Operators: >, <, =, >=, <=, !=\\n'; ";
  inner += "  helpText += 'Time Values: morning (6-12), afternoon (12-18), evening (18-24), night (0-6)\\n\\n'; ";
  inner += "  helpText += 'Conditional Structure:\\n'; ";
  inner += "  helpText += '• Must start with IF\\n'; ";
  inner += "  helpText += '• Can have multiple ELSE IF blocks\\n'; ";
  inner += "  helpText += '• Can end with ELSE (optional)\\n'; ";
  inner += "  helpText += '• ELSE must be last if used'; ";
  inner += "  alert(helpText); ";
  inner += "}";
  inner += "function autoToggle(id,en){ ";
  inner += "  const cmd='automation ' + (en? 'enable':'disable') + ' id='+id; ";
  inner += "  postCLI(cmd).then(()=>loadAutos()); ";
  inner += "}";
  inner += "function autoDelete(id){ ";
  inner += "  if(!confirm('Delete automation '+id+'?')) return; ";
  inner += "  postCLI('automation delete id='+id).then(()=>loadAutos()); ";
  inner += "}";
  inner += "function autoRun(id){ ";
  inner += "  postCLI('automation run id='+id).then(r=>{ ";
  inner += "    if(r.toLowerCase().indexOf('error:')>=0){ ";
  inner += "      alert(r); ";
  inner += "    } else { ";
  inner += "      alert('Automation executed: '+r); ";
  inner += "      loadAutos(); ";
  inner += "    } ";
  inner += "  }); ";
  inner += "}";
  inner += "function downloadFromGitHub(){ ";
  inner += "  const url=document.getElementById('github_url').value.trim(); ";
  inner += "  const name=document.getElementById('github_name').value.trim(); ";
  inner += "  const status=document.getElementById('download_status'); ";
  inner += "  if(!url){ ";
  inner += "    status.innerHTML='<span style=\"color:#dc3545\">Please enter a GitHub URL</span>'; ";
  inner += "    return; ";
  inner += "  } ";
  inner += "  status.innerHTML='<span style=\"color:#007bff\">Downloading...</span>'; ";
  inner += "  let cmd='downloadautomation url='+encodeURIComponent(url); ";
  inner += "  if(name) cmd+=' name='+encodeURIComponent(name); ";
  inner += "  postCLI(cmd).then(r=>{ ";
  inner += "    if(r.toLowerCase().indexOf('error:')>=0){ ";
  inner += "      status.innerHTML='<span style=\"color:#dc3545\">'+r+'</span>'; ";
  inner += "    } else { ";
  inner += "      status.innerHTML='<span style=\"color:#28a745\">'+r+'</span>'; ";
  inner += "      document.getElementById('github_url').value=''; ";
  inner += "      document.getElementById('github_name').value=''; ";
  inner += "      loadAutos(); ";
  inner += "    } ";
  inner += "  }).catch(e=>{ ";
  inner += "    status.innerHTML='<span style=\"color:#dc3545\">Network error: '+e.message+'</span>'; ";
  inner += "  }); ";
  inner += "}";
  inner += "function exportAllAutomations(){ ";
  inner += "  const status=document.getElementById('export_status'); ";
  inner += "  const separateFiles=document.getElementById('export_separate').checked; ";
  inner += "  status.innerHTML='<span style=\"color:#007bff\">Preparing export...</span>'; ";
  inner += "  if(separateFiles){ ";
  inner += "    fetch('/api/automations').then(r=>r.json()).then(data=>{ ";
  inner += "      if(data && data.automations && data.automations.length>0){ ";
  inner += "        let downloadCount = 0; ";
  inner += "        const downloadNext = (index) => { ";
  inner += "          if(index >= data.automations.length) { ";
  inner += "            status.innerHTML='<span style=\"color:#28a745\">' + downloadCount + ' files downloaded separately (import-ready)</span>'; ";
  inner += "            return; ";
  inner += "          } ";
  inner += "          const auto = data.automations[index]; ";
  inner += "          const exportAuto={}; ";
  inner += "          exportAuto.name=auto.name; ";
  inner += "          if(auto.type==='attime') exportAuto.type='atTime'; ";
  inner += "          else if(auto.type==='afterdelay') exportAuto.type='afterDelay'; ";
  inner += "          else if(auto.type==='interval') exportAuto.type='interval'; ";
  inner += "          else exportAuto.type=auto.type; ";
  inner += "          if(auto.time) exportAuto.time=auto.time; ";
  inner += "          if(auto.days) exportAuto.days=auto.days; ";
  inner += "          if(auto.delayMs) exportAuto.delay=auto.delayMs.toString(); ";
  inner += "          if(auto.intervalMs) exportAuto.interval=auto.intervalMs.toString(); ";
  inner += "          if(auto.commands) exportAuto.commands=auto.commands; ";
  inner += "          else if(auto.command) exportAuto.commands=[auto.command]; ";
  inner += "          if(auto.conditions) exportAuto.conditions=auto.conditions; ";
  inner += "          exportAuto.enabled=auto.enabled===true; ";
  inner += "          const blob=new Blob([JSON.stringify(exportAuto,null,2)],{type:'application/json'}); ";
  inner += "          const url=URL.createObjectURL(blob); ";
  inner += "          const link=document.createElement('a'); ";
  inner += "          link.href=url; ";
  inner += "          link.download=(auto.name || 'automation_'+auto.id)+'.json'; ";
  inner += "          link.style.display='none'; ";
  inner += "          document.body.appendChild(link); ";
  inner += "          link.click(); ";
  inner += "          document.body.removeChild(link); ";
  inner += "          URL.revokeObjectURL(url); ";
  inner += "          downloadCount++; ";
  inner += "          status.innerHTML='<span style=\"color:#007bff\">Downloading ' + (index + 1) + ' of ' + data.automations.length + '...</span>'; ";
  inner += "          setTimeout(() => downloadNext(index + 1), 500); ";
  inner += "        }; ";
  inner += "        downloadNext(0); ";
  inner += "      } else { ";
  inner += "        status.innerHTML='<span style=\"color:#dc3545\">No automations to export</span>'; ";
  inner += "      } ";
  inner += "    }).catch(e=>{ ";
  inner += "      status.innerHTML='<span style=\"color:#dc3545\">Export failed: '+e.message+'</span>'; ";
  inner += "    }); ";
  inner += "  } else { ";
  inner += "    const link=document.createElement('a'); ";
  inner += "    link.href='/api/automations/export'; ";
  inner += "    link.download=''; ";
  inner += "    link.style.display='none'; ";
  inner += "    document.body.appendChild(link); ";
  inner += "    link.click(); ";
  inner += "    document.body.removeChild(link); ";
  inner += "    status.innerHTML='<span style=\"color:#28a745\">Export started - check your downloads folder</span>'; ";
  inner += "  } ";
  inner += "  setTimeout(()=>{ ";
  inner += "    status.innerHTML=''; ";
  inner += "  }, 3000); ";
  inner += "}";
  inner += "function exportSingleAutomation(id){ ";
  inner += "  const link=document.createElement('a'); ";
  inner += "  link.href='/api/automations/export?id='+id; ";
  inner += "  link.download=''; ";
  inner += "  link.style.display='none'; ";
  inner += "  document.body.appendChild(link); ";
  inner += "  link.click(); ";
  inner += "  document.body.removeChild(link); ";
  inner += "}";
  inner += "</script>";

  return htmlShellWithNav(username, "automations", inner);
}
#endif
