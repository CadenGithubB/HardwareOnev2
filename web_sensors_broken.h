#ifndef WEB_SENSORS_H
#define WEB_SENSORS_H

#include "Arduino.h"

String getSensorsContent() {
  String inner = "";
  
  // HTML Structure
  inner += "<div class='page-header'>";
  inner += "<h1>Sensors</h1>";
  inner += "<p>Monitor and control connected sensors</p>";
  inner += "</div>";
  
  inner += "<div id='sensors-loading' class='loading-message'>Loading sensors...</div>";
  inner += "<div id='sensors-content' style='display:none;'>";
  inner += "<div id='sensors-grid' class='sensors-grid'></div>";
  inner += "</div>";
  
  // CSS Styles
  inner += "<style>";
  inner += ".sensors-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 20px; }";
  inner += ".sensor-card { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }";
  inner += ".sensor-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }";
  inner += ".sensor-title { font-size: 18px; font-weight: bold; margin: 0; }";
  inner += ".sensor-status { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }";
  inner += ".status-active { background: #d4edda; color: #155724; }";
  inner += ".status-inactive { background: #f8d7da; color: #721c24; }";
  inner += ".sensor-controls { display: flex; gap: 10px; margin-bottom: 15px; }";
  inner += ".sensor-btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }";
  inner += ".btn-start { background: #28a745; color: white; }";
  inner += ".btn-stop { background: #dc3545; color: white; }";
  inner += ".sensor-data { background: #f8f9fa; padding: 15px; border-radius: 4px; font-family: monospace; min-height: 60px; color: #000; }";
  inner += ".imu-grid { display: grid; grid-template-columns: 1fr 2fr; gap: 8px; align-items: center; }";
  inner += ".imu-label { font-weight: bold; }";
  inner += ".imu-val { font-family: monospace; }";
  inner += ".tof-objects-container { display: flex; flex-direction: column; gap: 8px; }";
  inner += ".tof-object-row { display: flex; align-items: center; gap: 10px; padding: 8px; background: #ffffff; border: 1px solid #dee2e6; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.06); }";
  inner += ".object-label { min-width: 70px; font-size: 0.9em; font-weight: bold; color: #212529; }";
  inner += ".distance-bar-container { flex: 1; height: 18px; background: #f1f3f5; border-radius: 0; position: relative; overflow: hidden; border: 1px solid #ced4da; }";
  inner += ".distance-bar { height: 100%; background: #4caf50; border-radius: 0; transition: width 0.2s ease; width: 0%; }";
  inner += ".distance-bar.invalid { background: #9e9e9e; opacity: 0.4; }";
  inner += ".object-info { min-width: 80px; font-size: 0.9em; text-align: right; color: #212529; font-weight: 600; }";
  inner += ".thermal-pixel { width: 100%; height: 100%; background-clip: padding-box; border-radius: 0; transition: background-color 0.15s ease-out; }";
  inner += "#thermalGrid { width: 320px; height: 240px; display: grid; grid-template-columns: repeat(32, 1fr); grid-auto-rows: 1fr; }";
  inner += "</style>";
  
  // JavaScript - Section 1: Globals and Utilities
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 1 start');}catch(_){}";
  inner += "window.sensorIntervals = {};";
  inner += "window.deviceRegistry = null;";
  inner += "function getSensorDataId(sensor) { return 'sensor-data-' + sensor; }";
  inner += "function setHidden(id, hidden) { var el = document.getElementById(id); if(el) el.style.display = hidden ? 'none' : 'block'; }";
  inner += "function startSensorPolling(sensor) {";
  inner += "  console.log('[SENSORS] Starting polling for ' + sensor);";
  inner += "  if (window.sensorIntervals[sensor]) clearInterval(window.sensorIntervals[sensor]);";
  inner += "  if (sensor === 'thermal') {";
  inner += "    if (typeof startThermalPolling === 'function') {";
  inner += "      startThermalPolling();";
  inner += "      return;";
  inner += "    }";
  inner += "  } else if (sensor === 'tof') {";
  inner += "    if (typeof startToFPolling === 'function') {";
  inner += "      startToFPolling();";
  inner += "      return;";
  inner += "    }";
  inner += "  }";
  inner += "  var pollMs = (sensor === 'imu') ? 200 : 500;";
  inner += "  window.sensorIntervals[sensor] = setInterval(function() { readSensor(sensor); }, pollMs);";
  inner += "  readSensor(sensor);";
  inner += "}";
  inner += "function stopSensorPolling(sensor) {";
  inner += "  console.log('[SENSORS] Stopping polling for ' + sensor);";
  inner += "  if (window.sensorIntervals[sensor]) {";
  inner += "    clearInterval(window.sensorIntervals[sensor]);";
  inner += "    delete window.sensorIntervals[sensor];";
  inner += "  }";
  inner += "  if (sensor === 'thermal') {";
  inner += "    if (typeof stopThermalPolling === 'function') {";
  inner += "      stopThermalPolling();";
  inner += "    }";
  inner += "  } else if (sensor === 'tof') {";
  inner += "    if (typeof stopToFPolling === 'function') {";
  inner += "      stopToFPolling();";
  inner += "    }";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 1 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 2: Control Functions
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 2 start');}catch(_){}";
  inner += "function controlSensor(sensor, action) {";
  inner += "  var cmd = sensor + (action === 'start' ? 'start' : 'stop');";
  inner += "  return fetch('/api/cli', {";
  inner += "    method: 'POST',";
  inner += "    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },";
  inner += "    body: 'cmd=' + encodeURIComponent(cmd)";
  inner += "  }).then(function(r) { return r.text(); });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 2 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 3: Read Functions (Complete)
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 3 start');}catch(_){}";
  inner += "function readSensor(sensor) {";
  inner += "  if (sensor === 'imu') {";
  inner += "    return fetch('/api/sensors?sensor=imu&ts=' + Date.now(), { cache: 'no-store' })";
  inner += "      .then(function(r) { return r.json(); })";
  inner += "      .then(function(data) {";
  inner += "        var el = document.getElementById(getSensorDataId(sensor));";
  inner += "        if (el && data && data.valid) {";
  inner += "          var ax = data.accel.x.toFixed(2), ay = data.accel.y.toFixed(2), az = data.accel.z.toFixed(2);";
  inner += "          var gx = data.gyro.x.toFixed(2), gy = data.gyro.y.toFixed(2), gz = data.gyro.z.toFixed(2);";
  inner += "          var yw = data.ori.yaw.toFixed(1), pt = data.ori.pitch.toFixed(1), rl = data.ori.roll.toFixed(1);";
  inner += "          var tc = Number(data.temp).toFixed(0);";
  inner += "          el.innerHTML = '<div class=\\\"imu-grid\\\">' +";
  inner += "            '<div class=\\\"imu-label\\\">Acceleration (m/s&sup2;)</div><div class=\\\"imu-val\\\">' + ax + ', ' + ay + ', ' + az + '</div>' +";
  inner += "            '<div class=\\\"imu-label\\\">Gyroscope (rad/s)</div><div class=\\\"imu-val\\\">' + gx + ', ' + gy + ', ' + gz + '</div>' +";
  inner += "            '<div class=\\\"imu-label\\\">Orientation YPR (deg)</div><div class=\\\"imu-val\\\">' + yw + ', ' + pt + ', ' + rl + '</div>' +";
  inner += "            '<div class=\\\"imu-label\\\">Temperature</div><div class=\\\"imu-val\\\">' + tc + '&deg;C</div>' +";
  inner += "            '</div>';";
  inner += "        } else if (el) {";
  inner += "          el.textContent = 'IMU not ready';";
  inner += "        }";
  inner += "        return data;";
  inner += "      });";
  inner += "  } else if (sensor === 'thermal') {";
  inner += "    if (typeof updateThermalVisualization === 'function') {";
  inner += "      updateThermalVisualization();";
  inner += "    }";
  inner += "    return Promise.resolve('Thermal visualization updated');";
  inner += "  } else if (sensor === 'tof') {";
  inner += "    if (typeof updateToFObjects === 'function') {";
  inner += "      updateToFObjects();";
  inner += "    }";
  inner += "    return Promise.resolve('ToF visualization updated');";
  inner += "  } else {";
  inner += "    return fetch('/api/cli', {";
  inner += "      method: 'POST',";
  inner += "      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },";
  inner += "      body: 'cmd=' + encodeURIComponent(sensor)";
  inner += "    }).then(function(r) { return r.text(); })";
  inner += "      .then(function(result) {";
  inner += "        var el = document.getElementById(getSensorDataId(sensor));";
  inner += "        if (el) {";
  inner += "          var timestamp = new Date().toLocaleTimeString();";
  inner += "          el.textContent = '[' + timestamp + '] ' + result;";
  inner += "        }";
  inner += "        return result;";
  inner += "      });";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 3 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 4: Button Handlers
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 4 start');}catch(_){}";
  inner += "function startSensor(sensor) {";
  inner += "  setHidden('btn-' + sensor + '-start', true);";
  inner += "  setHidden('btn-' + sensor + '-stop', false);";
  inner += "  controlSensor(sensor, 'start').then(function() {";
  inner += "    console.log('[SENSORS] ' + sensor + ' started');";
  inner += "    startSensorPolling(sensor);";
  inner += "  }).catch(function(e) {";
  inner += "    console.error('[SENSORS] ' + sensor + ' start failed:', e);";
  inner += "    setHidden('btn-' + sensor + '-start', false);";
  inner += "    setHidden('btn-' + sensor + '-stop', true);";
  inner += "  });";
  inner += "}";
  inner += "function stopSensor(sensor) {";
  inner += "  setHidden('btn-' + sensor + '-start', false);";
  inner += "  setHidden('btn-' + sensor + '-stop', true);";
  inner += "  stopSensorPolling(sensor);";
  inner += "  controlSensor(sensor, 'stop').then(function() {";
  inner += "    console.log('[SENSORS] ' + sensor + ' stopped');";
  inner += "  }).catch(function(e) {";
  inner += "    console.error('[SENSORS] ' + sensor + ' stop failed:', e);";
  inner += "    setHidden('btn-' + sensor + '-start', true);";
  inner += "    setHidden('btn-' + sensor + '-stop', false);";
  inner += "  });";
  inner += "}";
  inner += "function readSensorOnce(sensor) {";
  inner += "  readSensor(sensor).catch(function(e) {";
  inner += "    console.error('[SENSORS] ' + sensor + ' read failed:', e);";
  inner += "  });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 4 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 5: Card Creation
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 5 start');}catch(_){}";
  inner += "function createSensorCard(sensor) {";
  inner += "  var sensorNames = {";
  inner += "    'imu': 'IMU Sensor',";
  inner += "    'thermal': 'Thermal Camera',";
  inner += "    'tof': 'ToF Distance Sensor',";
  inner += "    'apdscolor': 'Color Sensor',";
  inner += "    'apdsproximity': 'Proximity Sensor',";
  inner += "    'apdsgesture': 'Gesture Sensor'";
  inner += "  };";
  inner += "  var name = sensorNames[sensor] || sensor.toUpperCase();";
  inner += "  return '<div class=\\\"sensor-card\\\" id=\\\"sensor-card-' + sensor + '\\\">' +";
  inner += "    '<div class=\\\"sensor-header\\\">' +";
  inner += "      '<h3 class=\\\"sensor-title\\\">' + name + '</h3>' +";
  inner += "      '<span class=\\\"sensor-status status-inactive\\\">Inactive</span>' +";
  inner += "    '</div>' +";
  inner += "    '<div class=\\\"sensor-controls\\\">' +";
  inner += "      '<button id=\\\"btn-' + sensor + '-start\\\" class=\\\"sensor-btn btn-start\\\" data-sensor=\\\"' + sensor + '\\\" data-action=\\\"start\\\">' +";
  inner += "        'Start' +";
  inner += "      '</button>' +";
  inner += "      '<button id=\\\"btn-' + sensor + '-stop\\\" class=\\\"sensor-btn btn-stop\\\" data-sensor=\\\"' + sensor + '\\\" data-action=\\\"stop\\\" style=\\\"display:none;\\\">' +";
  inner += "        'Stop' +";
  inner += "      '</button>' +";
  inner += "    '</div>' +";
  inner += "    '<div id=\\\"' + getSensorDataId(sensor) + '\\\" class=\\\"sensor-data\\\">' +";
  inner += "      'Sensor data will appear here when started' +";
  inner += "    '</div>' +";
  inner += "    (sensor === 'thermal' ? createThermalDisplay() : '') +";
  inner += "    (sensor === 'tof' ? createToFObjectsDisplay() : '') +";
  inner += "  '</div>';";
  inner += "}";
  inner += "function createThermalDisplay() {";
  inner += "  return '<div id=\\\"thermal-stats\\\" style=\\\"margin-top: 15px;\\\">Min: <span id=\\\"thermalMin\\\">--</span>&deg;C, Max: <span id=\\\"thermalMax\\\">--</span>&deg;C, Avg: <span id=\\\"thermalAvg\\\">--</span>&deg;C</div>' +";
  inner += "    '<div id=\\\"sensors-debug\\\" style=\\\"display:none; margin-top:8px; font-size: 0.85em; line-height:1.35; padding:8px; background:#fff8e1; border:1px solid #ffe082; border-radius:4px; color:#5d4037;\\\">' +";
  inner += "      '<div style=\\\"font-weight:600; margin-bottom:4px;\\\">Sensors Debug</div>' +";
  inner += "      '<div id=\\\"sensors-debug-content\\\">Debug not initialized</div>' +";
  inner += "    '</div>' +";
  inner += "    '<div id=\\\"thermalGrid\\\" style=\\\"margin-top: 10px; width: 320px; height: 240px; display: grid; grid-template-columns: repeat(32, 1fr); gap: 0px;\\\"></div>';";
  inner += "}";
  inner += "function createToFObjectsDisplay() {";
  inner += "  return '<div id=\\\"tof-objects-display\\\" style=\\\"margin-top: 15px; display: none;\\\">' +";
  inner += "    '<div style=\\\"font-weight: bold; margin-bottom: 10px; color: #333;\\\">Multi-Object Detection (0-<span id=\\\"tof-range-mm\\\">3400</span>mm)</div>' +";
  inner += "    '<div class=\\\"tof-objects-container\\\">' +";
  inner += "      '<div class=\\\"tof-object-row\\\" id=\\\"tof-object-1\\\">' +";
  inner += "        '<div class=\\\"object-label\\\">Object 1:</div>' +";
  inner += "        '<div class=\\\"distance-bar-container\\\">' +";
  inner += "          '<div class=\\\"distance-bar\\\" id=\\\"distance-bar-1\\\"></div>' +";
  inner += "        '</div>' +";
  inner += "        '<div class=\\\"object-info\\\" id=\\\"object-info-1\\\">---</div>' +";
  inner += "      '</div>' +";
  inner += "      '<div class=\\\"tof-object-row\\\" id=\\\"tof-object-2\\\">' +";
  inner += "        '<div class=\\\"object-label\\\">Object 2:</div>' +";
  inner += "        '<div class=\\\"distance-bar-container\\\">' +";
  inner += "          '<div class=\\\"distance-bar\\\" id=\\\"distance-bar-2\\\"></div>' +";
  inner += "        '</div>' +";
  inner += "        '<div class=\\\"object-info\\\" id=\\\"object-info-2\\\">---</div>' +";
  inner += "      '</div>' +";
  inner += "      '<div class=\\\"tof-object-row\\\" id=\\\"tof-object-3\\\">' +";
  inner += "        '<div class=\\\"object-label\\\">Object 3:</div>' +";
  inner += "        '<div class=\\\"distance-bar-container\\\">' +";
  inner += "          '<div class=\\\"distance-bar\\\" id=\\\"distance-bar-3\\\"></div>' +";
  inner += "        '</div>' +";
  inner += "        '<div class=\\\"object-info\\\" id=\\\"object-info-3\\\">---</div>' +";
  inner += "      '</div>' +";
  inner += "      '<div class=\\\"tof-object-row\\\" id=\\\"tof-object-4\\\">' +";
  inner += "        '<div class=\\\"object-label\\\">Object 4:</div>' +";
  inner += "        '<div class=\\\"distance-bar-container\\\">' +";
  inner += "          '<div class=\\\"distance-bar\\\" id=\\\"distance-bar-4\\\"></div>' +";
  inner += "        '</div>' +";
  inner += "        '<div class=\\\"object-info\\\" id=\\\"object-info-4\\\">---</div>' +";
  inner += "      '</div>' +";
  inner += "    '</div>' +";
  inner += "    '<div id=\\\"tof-objects-summary\\\" style=\\\"font-size: 0.9em; color: #212529; text-align: center; margin-top: 10px; padding: 8px; background: #e3f2fd; border-radius: 4px; font-weight: 500;\\\">Multi-object detection ready...</div>' +";
  inner += "  '</div>';";
  inner += "}";
  inner += "function setupButtonListeners() {";
  inner += "  console.log('[SENSORS] Setting up button listeners');";
  inner += "  var buttons = document.querySelectorAll('.sensor-btn');";
  inner += "  buttons.forEach(function(btn) {";
  inner += "    btn.addEventListener('click', function() {";
  inner += "      var sensor = this.getAttribute('data-sensor');";
  inner += "      var action = this.getAttribute('data-action');";
  inner += "      console.log('[SENSORS] Button clicked:', sensor, action);";
  inner += "      if (action === 'start') {";
  inner += "        startSensor(sensor);";
  inner += "      } else if (action === 'stop') {";
  inner += "        stopSensor(sensor);";
  inner += "      }";
  inner += "    });";
  inner += "  });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 5 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 6: Load Sensors
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 6 start');}catch(_){}";
  inner += "function loadSensors() {";
  inner += "  console.log('[SENSORS] loadSensors() starting - about to fetch /api/devices');";
  inner += "  fetch('/api/devices')";
  inner += "    .then(function(r) { ";
  inner += "      console.log('[SENSORS] Device registry fetch response:', r.status, r.ok);";
  inner += "      return r.json(); ";
  inner += "    })";
  inner += "    .then(function(registry) {";
  inner += "      console.log('[SENSORS] Device registry data received:', registry);";
  inner += "      window.deviceRegistry = registry;";
  inner += "      var availableSensors = [];";
  inner += "      if (registry && registry.devices) {";
  inner += "        registry.devices.forEach(function(device) {";
  inner += "          if (device.name === 'BNO055') availableSensors.push('imu');";
  inner += "          if (device.name === 'MLX90640') availableSensors.push('thermal');";
  inner += "          if (device.name === 'VL53L4CX') availableSensors.push('tof');";
  inner += "          if (device.name === 'APDS9960') {";
  inner += "            availableSensors.push('apdscolor');";
  inner += "            availableSensors.push('apdsproximity');";
  inner += "            availableSensors.push('apdsgesture');";
  inner += "          }";
  inner += "        });";
  inner += "      }";
  inner += "      var grid = document.getElementById('sensors-grid');";
  inner += "      if (grid) {";
  inner += "        grid.innerHTML = availableSensors.map(createSensorCard).join('');";
  inner += "        setupButtonListeners();";
  inner += "      }";
  inner += "      document.getElementById('sensors-loading').style.display = 'none';";
  inner += "      document.getElementById('sensors-content').style.display = 'block';";
  inner += "      console.log('[SENSORS] Loaded ' + availableSensors.length + ' sensors:', availableSensors);";
  inner += "    })";
  inner += "    .catch(function(e) {";
  inner += "      console.error('[SENSORS] Failed to load device registry:', e);";
  inner += "      document.getElementById('sensors-loading').textContent = 'Failed to load sensors';";
  inner += "    });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 6 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 7: Initialization
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 7 start');}catch(_){}";
  inner += "document.addEventListener('DOMContentLoaded', function() {";
  inner += "  console.log('[SENSORS] DOMContentLoaded event fired');";
  inner += "  try {";
  inner += "    console.log('[SENSORS] About to call loadSensors()');";
  inner += "    loadSensors();";
  inner += "    console.log('[SENSORS] loadSensors() called successfully');";
  inner += "  } catch(e) {";
  inner += "    console.error('[SENSORS] Error in DOMContentLoaded:', e);";
  inner += "  }";
  inner += "});";
  inner += "console.log('[SENSORS] Script loaded - about to set up DOMContentLoaded');";
  inner += "try{console.log('[SENSORS] Section 7 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 8: Thermal and ToF Functions
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 8 start');}catch(_){}";
  inner += "var thermalPollingInterval = null;";
  inner += "var thermalPollingMs = 200;";
  inner += "var tofPollingInterval = null;";
  inner += "var tofObjectStates = [{}, {}, {}, {}];";
  inner += "var tofStabilityThreshold = 2;";
  inner += "var tofMaxDistance = 3400;";
  inner += "var tofPollingMs = 300;";
  inner += "// Thermal interpolation globals";
  inner += "var thermalInterpolationEnabled = (typeof window.thermalInterpolationEnabled!== 'undefined') ? window.thermalInterpolationEnabled : true;";
  inner += "var thermalInterpolationSteps = (typeof window.thermalInterpolationSteps!== 'undefined') ? window.thermalInterpolationSteps : 3;";
  inner += "var thermalInterpolationInterval = null;";
  inner += "var thermalPrevFrame = null;";
  inner += "function applyThermalTransition(ms) {";
  inner += "  try {";
  inner += "    var grid = document.getElementById('thermalGrid');";
  inner += "    if (grid && grid.children.length === 768) {";
  inner += "      var s = (ms / 1000).toFixed(3) + 's';";
  inner += "      for (var i = 0; i < 768; i++) {";
  inner += "        grid.children[i].style.transition = 'background-color ' + s + ' linear';";
  inner += "      }";
  inner += "    }";
  inner += "  } catch(e) {";
  inner += "    console.warn('[Sensors] applyThermalTransition error', e);";
  inner += "  }";
  inner += "}";
  inner += "function applyToFTransition(ms) {";
  inner += "  try {";
  inner += "    var s = (ms / 1000).toFixed(3) + 's';";
  inner += "    for (var j = 1; j <= 4; j++) {";
  inner += "      var be = document.getElementById('distance-bar-' + j);";
  inner += "      if (be) {";
  inner += "        be.style.transition = 'width ' + s + ' ease';";
  inner += "      }";
  inner += "    }";
  inner += "  } catch(e) {";
  inner += "    console.warn('[Sensors] applyToFTransition error', e);";
  inner += "  }";
  inner += "}";
  inner += "function startThermalPolling() {";
  inner += "  console.log('[SENSORS] Starting thermal polling');";
  inner += "  if (thermalPollingInterval) return;";
  inner += "  updateThermalVisualization();";
  inner += "  thermalPollingInterval = setInterval(function() { updateThermalVisualization(); }, thermalPollingMs);";
  inner += "}";
  inner += "function stopThermalPolling() {";
  inner += "  console.log('[SENSORS] Stopping thermal polling');";
  inner += "  if (thermalPollingInterval) {";
  inner += "    clearInterval(thermalPollingInterval);";
  inner += "    thermalPollingInterval = null;";
  inner += "  }";
  inner += "  if (thermalInterpolationInterval) { clearInterval(thermalInterpolationInterval); thermalInterpolationInterval = null; }";
  inner += "}";
  inner += "function updateThermalVisualization() {";
  inner += "  var url = '/api/sensors?sensor=thermal&ts=' + Date.now();";
  inner += "  fetch(url, { cache: 'no-store' })";
  inner += "    .then(function(response) {";
  inner += "      if (!response.ok) {";
  inner += "        throw new Error('HTTP ' + response.status);";
  inner += "      }";
  inner += "      return response.json();";
  inner += "    })";
  inner += "    .then(function(data) {";
  inner += "      if (data && data.v === 1 && data.f) {";
  inner += "        var frame = data.f;";
  inner += "        if (frame.length === 768) {";
  inner += "          renderThermalGrid(frame);";
  inner += "          updateThermalStatsFromAPI(data);";
  inner += "        } else {";
  inner += "          console.warn('[Thermal] Invalid frame length:', frame.length);";
  inner += "          var el = document.getElementById('sensor-data-thermal');";
  inner += "          if (el) el.textContent = 'Invalid thermal frame: ' + frame.length + ' pixels';";
  inner += "        }";
  inner += "      } else {";
  inner += "        var el = document.getElementById('sensor-data-thermal');";
  inner += "        if (el) el.textContent = 'Thermal sensor not ready (v=' + (data ? data.v : 'null') + ')';";
  inner += "      }";
  inner += "    })";
  inner += "    .catch(function(error) {";
  inner += "      var el = document.getElementById('sensor-data-thermal');";
  inner += "      if (el) {";
  inner += "        var timestamp = new Date().toLocaleTimeString();";
  inner += "        el.textContent = '[' + timestamp + '] Thermal error: ' + error.message;";
  inner += "      }";
  inner += "    });";
  inner += "}";
  inner += "function renderThermalGrid(frame) {";
  inner += "  var grid = document.getElementById('thermalGrid');";
  inner += "  if (!grid) return;";
  inner += "  if (grid.children.length !== 768) {";
  inner += "    grid.innerHTML = '';";
  inner += "    for (var i = 0; i < 768; i++) {";
  inner += "      var pixel = document.createElement('div');";
  inner += "      pixel.className = 'thermal-pixel';";
  inner += "      grid.appendChild(pixel);";
  inner += "    }";
  inner += "  }";
  inner += "  var min = Math.min.apply(Math, frame);";
  inner += "  var max = Math.max.apply(Math, frame);";
  inner += "  var range = max - min || 1;";
  inner += "  for (var j = 0; j < 768; j++) {";
  inner += "    var temp = frame[j];";
  inner += "    var normalized = (temp - min) / range;";
  inner += "    var color = tempToColor(normalized);";
  inner += "    grid.children[j].style.backgroundColor = color;";
  inner += "  }";
  inner += "}";
  inner += "function updateThermalStats(frame) {";
  inner += "  var min = Math.min.apply(Math, frame);";
  inner += "  var max = Math.max.apply(Math, frame);";
  inner += "  var sum = frame.reduce(function(a, b) { return a + b; }, 0);";
  inner += "  var avg = sum / frame.length;";
  inner += "  var minEl = document.getElementById('thermalMin');";
  inner += "  var maxEl = document.getElementById('thermalMax');";
  inner += "  var avgEl = document.getElementById('thermalAvg');";
  inner += "  if (minEl) minEl.textContent = min.toFixed(1);";
  inner += "  if (maxEl) maxEl.textContent = max.toFixed(1);";
  inner += "  if (avgEl) avgEl.textContent = avg.toFixed(1);";
  inner += "}";
  inner += "function updateThermalStatsFromAPI(data) {";
  inner += "  var minEl = document.getElementById('thermalMin');";
  inner += "  var maxEl = document.getElementById('thermalMax');";
  inner += "  var avgEl = document.getElementById('thermalAvg');";
  inner += "  if (minEl) minEl.textContent = data.mn.toFixed(1);";
  inner += "  if (maxEl) maxEl.textContent = data.mx.toFixed(1);";
  inner += "  if (avgEl) {";
  inner += "    var sum = data.f.reduce(function(a, b) { return a + b; }, 0);";
  inner += "    var avg = sum / data.f.length;";
  inner += "    avgEl.textContent = avg.toFixed(1);";
  inner += "  }";
  inner += "}";
  inner += "function tempToColor(normalized) {";
  inner += "  var palette = window.thermalPalette || 'grayscale';";
  inner += "  if (palette === 'grayscale') {";
  inner += "    var gray = Math.round(255 * normalized);";
  inner += "    return 'rgb(' + gray + ',' + gray + ',' + gray + ')';";
  inner += "  }";
  inner += "  if (normalized < 0.5) {";
  inner += "    var t = normalized * 2;";
  inner += "    var r = Math.round(59 + (221 - 59) * t);";
  inner += "    var g = Math.round(76 + (221 - 76) * t);";
  inner += "    var b = Math.round(192 + (221 - 192) * t);";
  inner += "  } else {";
  inner += "    var t = (normalized - 0.5) * 2;";
  inner += "    var r = Math.round(221 + (180 - 221) * t);";
  inner += "    var g = Math.round(221 + (4 - 221) * t);";
  inner += "    var b = Math.round(221 + (38 - 221) * t);";
  inner += "  }";
  inner += "  return 'rgb(' + r + ',' + g + ',' + b + ')';";
  inner += "}";
  inner += "function startToFPolling() {";
  inner += "  if (tofPollingInterval) return;";
  inner += "  var d = document.getElementById('tof-objects-display');";
  inner += "  if (d) { d.style.display = 'block'; }";
  inner += "  updateToFObjects();";
  inner += "  tofPollingInterval = setInterval(function() { updateToFObjects(); }, tofPollingMs);";
  inner += "}";
  inner += "function stopToFPolling() {";
  inner += "  if (tofPollingInterval) {";
  inner += "    clearInterval(tofPollingInterval);";
  inner += "    tofPollingInterval = null;";
  inner += "  }";
  inner += "  var d = document.getElementById('tof-objects-display');";
  inner += "  if (d) { d.style.display = 'none'; }";
  inner += "}";
  inner += "function updateToFObjects() {";
  inner += "  var url = '/api/sensors?sensor=tof&ts=' + Date.now();";
  inner += "  fetch(url, { cache: 'no-store', credentials: 'same-origin' })";
  inner += "    .then(function(response) {";
  inner += "      if (!response.ok) {";
  inner += "        var err = 'HTTP ' + response.status;";
  inner += "        throw new Error(err);";
  inner += "      }";
  inner += "      return response.json();";
  inner += "    })";
  inner += "    .then(function(data) {";
  inner += "      if (data && data.objects) {";
  inner += "        var validObjects = 0;";
  inner += "        for (var i = 0; i < 4; i++) {";
  inner += "          var obj = data.objects[i];";
  inner += "          var barElement = document.getElementById('distance-bar-' + (i + 1));";
  inner += "          var infoElement = document.getElementById('object-info-' + (i + 1));";
  inner += "          var state = tofObjectStates[i];";
  inner += "          if (obj && obj.detected && obj.valid) {";
  inner += "            var distance_mm = obj.distance_mm || 0;";
  inner += "            var distance_cm = obj.distance_cm || 0;";
  inner += "            if (!state.lastDistance || Math.abs(state.lastDistance - distance_mm) < 200) {";
  inner += "              state.stableCount = (state.stableCount || 0) + 1;";
  inner += "              state.lastDistance = distance_mm;";
  inner += "              if (state.stableCount >= tofStabilityThreshold) {";
  inner += "                validObjects++;";
  inner += "                var percentage = Math.min(100, (distance_mm / tofMaxDistance) * 100);";
  inner += "                barElement.style.width = percentage + '%';";
  inner += "                barElement.className = 'distance-bar';";
  inner += "                infoElement.textContent = distance_cm.toFixed(1) + ' cm';";
  inner += "                state.displayed = true;";
  inner += "              }";
  inner += "            } else {";
  inner += "              state.stableCount = 1;";
  inner += "              state.lastDistance = distance_mm;";
  inner += "            }";
  inner += "          } else {";
  inner += "            state.stableCount = 0;";
  inner += "            if (state.displayed) {";
  inner += "              state.missCount = (state.missCount || 0) + 1;";
  inner += "              if (state.missCount >= tofStabilityThreshold) {";
  inner += "                barElement.style.width = '0%';";
  inner += "                barElement.className = 'distance-bar invalid';";
  inner += "                infoElement.textContent = '---';";
  inner += "                state.displayed = false;";
  inner += "                state.missCount = 0;";
  inner += "              }";
  inner += "            } else {";
  inner += "              barElement.style.width = '0%';";
  inner += "              barElement.className = 'distance-bar invalid';";
  inner += "              infoElement.textContent = '---';";
  inner += "            }";
  inner += "          }";
  inner += "        }";
  inner += "        var summary = document.getElementById('tof-objects-summary');";
  inner += "        if (summary) {";
  inner += "          var seq = (typeof data.seq !== 'undefined' ? data.seq : '?');";
  inner += "          summary.textContent = validObjects + ' object(s) detected of ' + (data.total_objects || 0) + ' total | seq=' + seq;";
  inner += "        }";
  inner += "      } else if (data && data.error) {";
  inner += "        var summary2 = document.getElementById('tof-objects-summary');";
  inner += "        if (summary2) { summary2.textContent = 'Error: ' + data.error; }";
  inner += "      }";
  inner += "    })";
  inner += "    .catch(function(error) {";
  inner += "      var summary3 = document.getElementById('tof-objects-summary');";
  inner += "      if (summary3) { summary3.textContent = 'Connection error: ' + (error && error.message ? error.message : ''); }";
  inner += "      for (var j = 1; j <= 4; j++) {";
  inner += "        var be = document.getElementById('distance-bar-' + j);";
  inner += "        var ie = document.getElementById('object-info-' + j);";
  inner += "        if (be) { be.style.width = '0%'; be.className = 'distance-bar invalid'; }";
  inner += "        if (ie) { ie.textContent = '---'; }";
  inner += "      }";
  inner += "    });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 8 ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Section 9: Settings System
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Section 9 start');}catch(_){}";
  inner += "function applySensorsSettings(s) {";
  inner += "  try {";
  inner += "    console.log('[SENSORS] Applying settings:', s);";
  inner += "    if (typeof s.debugSensorsFrame === 'boolean') { window.debugSensorsFrame = s.debugSensorsFrame; }";
  inner += "    if (typeof s.debugSensorsGeneral === 'boolean') { window.debugSensorsGeneral = s.debugSensorsGeneral; }";
  inner += "    if (typeof s.thermalPollingMs === 'number') {";
  inner += "      thermalPollingMs = Math.max(50, Math.min(5000, s.thermalPollingMs));";
  inner += "    }";
  inner += "    if (typeof s.thermalWebMaxFps === 'number') {";
  inner += "      var derivedMs = Math.max(50, Math.round(1000 / Math.max(1, Math.min(20, s.thermalWebMaxFps))));";
  inner += "      thermalPollingMs = derivedMs;";
  inner += "    }";
  inner += "    if (typeof s.thermalPaletteDefault === 'string') {";
  inner += "      window.thermalPalette = s.thermalPaletteDefault;";
  inner += "    }";
  inner += "    if (typeof s.thermalEWMAFactor === 'number') {";
  inner += "      window.thermalEwmaAlpha = Math.max(0, Math.min(1, s.thermalEWMAFactor));";
  inner += "    }";
  inner += "    if (typeof s.thermalTransitionMs === 'number') {";
  inner += "      applyThermalTransition(Math.max(0, Math.min(1000, s.thermalTransitionMs)));";
  inner += "    }";
  inner += "    if (typeof s.thermalInterpolationEnabled === 'boolean') {";
  inner += "      window.thermalInterpolationEnabled = s.thermalInterpolationEnabled;";
  inner += "    }";
  inner += "    if (typeof s.thermalInterpolationSteps === 'number') {";
  inner += "      window.thermalInterpolationSteps = Math.max(1, Math.min(8, s.thermalInterpolationSteps));";
  inner += "    }";
  inner += "    if (typeof s.thermalInterpolationBufferSize === 'number') {";
  inner += "      window.thermalBufferSize = Math.max(1, Math.min(10, s.thermalInterpolationBufferSize));";
  inner += "    }";
  inner += "    if (typeof s.thermalWebClientQuality === 'number') {";
  inner += "      window.thermalWebClientQuality = Math.max(1, Math.min(4, s.thermalWebClientQuality));";
  inner += "    }";
  inner += "    if (typeof s.tofPollingMs === 'number') {";
  inner += "      tofPollingMs = Math.max(50, Math.min(5000, s.tofPollingMs));";
  inner += "    }";
  inner += "    if (typeof s.tofStabilityThreshold === 'number') {";
  inner += "      tofStabilityThreshold = Math.max(1, Math.min(20, s.tofStabilityThreshold));";
  inner += "    }";
  inner += "    if (typeof s.tofTransitionMs === 'number') {";
  inner += "      applyToFTransition(Math.max(0, Math.min(1000, s.tofTransitionMs)));";
  inner += "    }";
  inner += "    if (typeof s.tofUiMaxDistanceMm === 'number') {";
  inner += "      tofMaxDistance = Math.max(100, Math.min(12000, s.tofUiMaxDistanceMm));";
  inner += "      var rng = document.getElementById('tof-range-mm');";
  inner += "      if (rng) { rng.textContent = String(tofMaxDistance); }";
  inner += "    }";
  inner += "  } catch(e) {";
  inner += "    console.warn('[SENSORS] apply settings error', e);";
  inner += "  }";
  inner += "}";
  inner += "function fetchAndApplySensorsSettings() {";
  inner += "  console.log('[SENSORS] Fetching settings...');";
  inner += "  fetch('/api/settings')";
  inner += "    .then(function(r) { return r.json(); })";
  inner += "    .then(function(cfg) {";
  inner += "      console.log('[SENSORS] Settings received:', cfg);";
  inner += "      var s = (cfg && cfg.settings) ? cfg.settings : {};";
  inner += "      applySensorsSettings(s);";
  inner += "    })";
  inner += "    .catch(function(e) {";
  inner += "      console.warn('[SENSORS] settings fetch error', e);";
  inner += "    });";
  inner += "}";
  inner += "if (document.readyState === 'loading') {";
  inner += "  document.addEventListener('DOMContentLoaded', fetchAndApplySensorsSettings);";
  inner += "} else {";
  inner += "  fetchAndApplySensorsSettings();";
  inner += "}";
  inner += "try{console.log('[SENSORS] Section 9 ready');}catch(_){}";
  inner += "</script>";

  // JavaScript - Section 9b: Sensors Debug Panel (shows applied settings)
  inner += "<script>";
  inner += "try{ console.debug('[SENSORS] Section 9b (debug panel) start'); }catch(_){ }";
  inner += "(function(){";
  inner += "  function val(v, d){ return (typeof v==='undefined' || v===null) ? d : v; }";
  inner += "  function yn(b){ return b ? 'yes' : 'no'; }";
  inner += "  function refreshSensorsDebugPanel(){";
  inner += "    try {";
  inner += "      var dbg = document.getElementById('sensors-debug');";
  inner += "      if(!dbg) return;";
  inner += "      var show = !!(window.debugSensorsFrame || window.debugSensorsGeneral);";
  inner += "      dbg.style.display = show ? '' : 'none';";
  inner += "      if(!show) return;";
  inner += "      var q = Number(val(window.thermalWebClientQuality, 1));";
  inner += "      var steps = Number(val(window.thermalInterpolationSteps, 3));";
  inner += "      var buf = Number(val(window.thermalBufferSize, 3));";
  inner += "      var poll = Number(val(window.thermalPollingMs, 200));";
  inner += "      var webFps = Number(val(window.thermalFpsClampMax, 20));";
  inner += "      var ewma = Number(val(window.thermalEwmaAlpha, 0.1));";
  inner += "      var palette = String(val(window.thermalPalette, 'grayscale'));";
  inner += "      var interEnabled = !!val(window.thermalInterpolationEnabled, true);";
  inner += "      var prevUps = Array.isArray(window.thermalPrevUpscaled) ? window.thermalPrevUpscaled.length : 0;";
  inner += "      var grid = document.getElementById('thermalGrid');";
  inner += "      var gridCells = grid ? grid.children.length : 0;";
  inner += "      var interActive = interEnabled && prevUps>0 && prevUps===gridCells;";
  inner += "      var appliedToFMs = Number(val(window.tofPollingMs, 300));";
  inner += "      var appliedToFThresh = Number(val(window.tofStabilityThreshold, 2));";
  inner += "      var appliedToFMax = Number(val(window.tofMaxDistance, 3400));";
  inner += "      var content = 'Thermal: poll=' + poll + 'ms, webMaxFps=' + webFps + '<br/>' +";
  inner += "                    'Palette=' + palette + ', EWMA=' + ewma.toFixed(2) + '<br/>' +";
  inner += "                    'Interp: enabled=' + yn(interEnabled) + ', active=' + yn(interActive) + ', steps=' + steps + ', buffer=' + buf + '<br/>' +";
  inner += "                    'Quality=' + q + 'x (' + (32*q) + 'x' + (24*q) + '), gridCells=' + gridCells + '<br/>' +";
  inner += "                    'ToF: poll=' + appliedToFMs + 'ms, stability=' + appliedToFThresh + ', uiMax=' + appliedToFMax + 'mm';";
  inner += "      var el = document.getElementById('sensors-debug-content');";
  inner += "      if(el){ el.innerHTML = content; }";
  inner += "    } catch(e) { try{ console.warn('[SENSORS] debug panel update error', e); }catch(_){ } }";
  inner += "  }";
  inner += "  window.refreshSensorsDebugPanel = refreshSensorsDebugPanel;";
  inner += "  if(document.readyState==='loading'){ document.addEventListener('DOMContentLoaded', function(){ setInterval(refreshSensorsDebugPanel, 1000); }); } else { setInterval(refreshSensorsDebugPanel, 1000); }";
  inner += "})();";
  inner += "try{ console.debug('[SENSORS] Section 9b (debug panel) ready'); }catch(_){ }";
  inner += "</script>";
  
  return inner;
}

String getSensorsPage(const String& username) {
  return htmlShellWithNav(username, "sensors", getSensorsContent());
}

#endif
