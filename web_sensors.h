#ifndef WEB_SENSORS_H
#define WEB_SENSORS_H

#include <Arduino.h>
#include "web_shared.h"

String getSensorsContent() {
  String inner = 
    "<style>"
    ".sensors-container { max-width: 1200px; margin: 0 auto; padding: 20px; }"
    ".sensor-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin-bottom: 30px; }"
    ".sensor-card { background: rgba(255,255,255,0.9); border-radius: 15px; padding: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); border: 1px solid rgba(255,255,255,0.2); }"
    ".sensor-title { font-size: 1.3em; font-weight: bold; margin-bottom: 10px; color: #333; display: flex; align-items: center; gap: 10px; }"
    ".sensor-description { color: #666; margin-bottom: 15px; font-size: 0.9em; }"
    ".sensor-controls { display: flex; gap: 10px; margin-bottom: 15px; flex-wrap: wrap; }"
    ".sensor-data { background: #f8f9fa; border-radius: 8px; padding: 15px; font-family: 'Courier New', monospace; font-size: 0.9em; border-left: 4px solid #007bff; min-height: 60px; }"
    "#gyro-data { color: #111; }"
    ".imu-grid { display: grid; grid-template-columns: 160px 1fr; column-gap: 8px; row-gap: 6px; align-items: baseline; }"
    ".imu-label { color: #333; font-weight: 600; font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; }"
    ".imu-val { color: #111; font-family: 'Courier New', monospace; }"
    ".status-indicator { display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; }"
    ".status-enabled { background: #28a745; animation: pulse 2s infinite; }"
    ".status-disabled { background: #dc3545; }"
    "@keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.5; } 100% { opacity: 1; } }"
    ".thermal-pixel { width: 100%; height: 100%; background-clip: padding-box; border-radius: 0; transition: background-color 0.15s ease-out; }"
    "#thermalGrid { width: 320px; height: 240px; display: grid; grid-template-columns: repeat(32, 1fr); grid-auto-rows: 1fr; }"
    ".tof-objects-container { display: flex; flex-direction: column; gap: 8px; }"
    ".tof-object-row { display: flex; align-items: center; gap: 10px; padding: 8px; background: #ffffff; border: 1px solid #dee2e6; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.06); }"
    ".object-label { min-width: 70px; font-size: 0.9em; font-weight: bold; color: #212529; }"
    ".distance-bar-container { flex: 1; height: 18px; background: #f1f3f5; border-radius: 0; position: relative; overflow: hidden; border: 1px solid #ced4da; }"
    ".distance-bar { height: 100%; background: #4caf50; border-radius: 0; transition: width 0.2s ease; width: 0%; }"
    ".distance-bar.invalid { background: #9e9e9e; opacity: 0.4; }"
    ".object-info { min-width: 80px; font-size: 0.9em; text-align: right; color: #212529; font-weight: 600; }"
    "</style>"
    
    "<div class='sensors-container'>"
    "<div class='sensor-grid'>"
    
    // Gyroscope & Accelerometer (BNO055)
    "<div class='sensor-card' id='sensor-card-imu'>"
    "<div class='sensor-title'>"
    "<span>Gyroscope & Accelerometer (BNO055)</span>"
    "<span class='status-indicator status-disabled' id='gyro-status-indicator'></span>"
    "</div>"
    "<div class='sensor-description'>9-axis IMU sensor for precise orientation, acceleration, and gyroscope data.</div>"
    "<div class='sensor-controls'>"
    "<button class='btn' id='btn-imu-start'>Start IMU</button>"
    "<button class='btn' id='btn-imu-stop'>Stop IMU</button>"
    "</div>"
    "<div class='sensor-data' id='gyro-data'>IMU sensor data will appear here...</div>"
    "</div>"
    
    // Thermal Camera
    "<div class='sensor-card' id='sensor-card-thermal'>"
    "<div class='sensor-title'>"
    "<span>Thermal Camera (MLX90640)</span>"
    "<span class='status-indicator status-disabled' id='thermal-status-indicator'></span>"
    "</div>"
    "<div class='sensor-description'>32x24 thermal infrared camera for high-resolution temperature imaging and heat detection.</div>"
    "<div class='sensor-controls'>"
    "<button class='btn' id='btn-thermal-start'>Start Thermal</button>"
    "<button class='btn' id='btn-thermal-stop'>Stop Thermal</button>"
    "</div>"
    "<div class='sensor-data' id='thermal-data'>"
    "<div id='thermal-stats'>Min: <span id='thermalMin'>--</span>&deg;C, Max: <span id='thermalMax'>--</span>&deg;C, Avg: <span id='thermalAvg'>--</span>&deg;C, FPS: <span id='thermalFps'>--</span></div>"
    "<div id='thermal-performance' style='font-size: 0.9em; color: #888; margin-top: 5px;'>Capture: --ms</div>"
    "<div id='thermalGrid' style='margin-top: 10px; display: grid; grid-template-columns: repeat(32, 1fr); gap: 0px; width: 320px; height: 240px;'>"
    "<!-- 768 thermal pixels (32x24 grid) generated by JavaScript -->"
    "</div>"
    "</div>"
    "</div>"
    
    // ToF Distance Sensor
    "<div class='sensor-card' id='sensor-card-tof'>"
    "<div class='sensor-title'>"
    "<span>ToF Distance Sensor</span>"
    "<span class='status-indicator status-disabled' id='tof-status-indicator'></span>"
    "</div>"
    "<div class='sensor-description'>VL53L4CX Time-of-Flight sensor for precise distance measurement up to 4 meters.</div>"
    "<div class='sensor-controls'>"
    "<button class='btn' id='btn-tof-start'>Start ToF</button>"
    "<button class='btn' id='btn-tof-stop'>Stop ToF</button>"
    "</div>"
    "<div class='sensor-data' id='tof-data'>ToF sensor data will appear here...</div>"
    "<div id='tof-objects-display' style='margin-top: 15px; display: none;'>"
    "<div style='font-weight: bold; margin-bottom: 10px; color: #333;'>Multi-Object Detection (0-<span id='tof-range-mm'>3400</span>mm)</div>"
    "<div class='tof-objects-container'>"
    "<div class='tof-object-row' id='tof-object-1'>"
    "<div class='object-label'>Object 1:</div>"
    "<div class='distance-bar-container'>"
    "<div class='distance-bar' id='distance-bar-1'></div>"
    "</div>"
    "<div class='object-info' id='object-info-1'>---</div>"
    "</div>"
    "<div class='tof-object-row' id='tof-object-2'>"
    "<div class='object-label'>Object 2:</div>"
    "<div class='distance-bar-container'>"
    "<div class='distance-bar' id='distance-bar-2'></div>"
    "</div>"
    "<div class='object-info' id='object-info-2'>---</div>"
    "</div>"
    "<div class='tof-object-row' id='tof-object-3'>"
    "<div class='object-label'>Object 3:</div>"
    "<div class='distance-bar-container'>"
    "<div class='distance-bar' id='distance-bar-3'></div>"
    "</div>"
    "<div class='object-info' id='object-info-3'>---</div>"
    "</div>"
    "<div class='tof-object-row' id='tof-object-4'>"
    "<div class='object-label'>Object 4:</div>"
    "<div class='distance-bar-container'>"
    "<div class='distance-bar' id='distance-bar-4'></div>"
    "</div>"
    "<div class='object-info' id='object-info-4'>---</div>"
    "</div>"
    "</div>"
    "<div id='tof-objects-summary' style='font-size: 0.9em; color: #212529; text-align: center; margin-top: 10px; padding: 8px; background: #e3f2fd; border-radius: 4px; font-weight: 500;'>"
    "Multi-object detection ready..."
    "</div>"
    "</div>"
    "</div>"
    
    "</div>" // End sensor-grid
    "</div>"; // End sensors-container

  // JavaScript - Chunk 1: Global Variables & Settings
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 1: Variables start');}catch(_){}";
  inner += "var sensorIntervals = {};";
  inner += "var thermalPollingInterval = null;";
  inner += "var thermalPollingMs = 200;";
  inner += "var tofPollingInterval = null;";
  inner += "var tofObjectStates = [{}, {}, {}, {}];";
  inner += "var tofStabilityThreshold = 2;";
  inner += "var tofMaxDistance = 3400;";
  inner += "var tofPollingMs = 300;";
  inner += "var tofTransitionMs = 200;";
  inner += "var settingsLoaded = false;";
  inner += "var thermalPalette = 'grayscale';";
  inner += "var thermalColorMap = {};";
  inner += "var thermalEWMAFactor = 0.2;";
  inner += "var thermalInterpolationEnabled = false;";
  inner += "var thermalInterpolationSteps = 3;";
  inner += "var thermalInterpolationBufferSize = 3;";
  inner += "var thermalWebClientQuality = 2;";
  inner += "var thermalTransitionMs = 120;";
  inner += "var thermalPreviousFrame = null;";
  inner += "var debugSettings = {sensorsFrame: 0, http: 0, sse: 0};";
  inner += "function debugLog(category, message) {";
  inner += "  if (debugSettings[category]) {";
  inner += "    console.log('[DEBUG-' + category.toUpperCase() + ']', message);";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 1: Variables ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 2: Settings (Combined)
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 2: Settings start');}catch(_){}";
  inner += "function loadSensorSettings() {";
  inner += "  console.log('[Settings] Loading sensor settings...');";
  inner += "  return fetch('/api/settings', { cache: 'no-store' })";
  inner += "    .then(function(response) {";
  inner += "      if (!response.ok) throw new Error('Settings fetch failed');";
  inner += "      return response.json();";
  inner += "    })";
  inner += "    .then(function(settings) {";
  inner += "      console.log('[Settings] Loaded:', settings);";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalPollingMs !== undefined) {";
  inner += "        thermalPollingMs = settings.settings.thermal.ui.thermalPollingMs;";
  inner += "        console.log('[Settings] Thermal polling: ' + thermalPollingMs + 'ms');";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.tof && settings.settings.tof.ui && settings.settings.tof.ui.tofPollingMs !== undefined) {";
  inner += "        tofPollingMs = settings.settings.tof.ui.tofPollingMs;";
  inner += "        console.log('[Settings] ToF polling: ' + tofPollingMs + 'ms');";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.tof && settings.settings.tof.ui && settings.settings.tof.ui.tofStabilityThreshold !== undefined) {";
  inner += "        tofStabilityThreshold = settings.settings.tof.ui.tofStabilityThreshold;";
  inner += "        console.log('[Settings] ToF stability threshold: ' + tofStabilityThreshold);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.tof && settings.settings.tof.ui && settings.settings.tof.ui.tofUiMaxDistanceMm !== undefined) {";
  inner += "        tofMaxDistance = settings.settings.tof.ui.tofUiMaxDistanceMm;";
  inner += "        console.log('[Settings] ToF max distance: ' + tofMaxDistance + 'mm');";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.tof && settings.settings.tof.ui && settings.settings.tof.ui.tofTransitionMs !== undefined) {";
  inner += "        tofTransitionMs = settings.settings.tof.ui.tofTransitionMs;";
  inner += "        console.log('[Settings] ToF transition ms: ' + tofTransitionMs);";
  inner += "      }";
  inner += "      console.log('[Settings] Checking thermal palette...', settings.settings);";
  inner += "      console.log('[Settings] Full thermal path:', settings.settings && settings.settings.thermal);";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalPaletteDefault !== undefined) {";
  inner += "        thermalPalette = settings.settings.thermal.ui.thermalPaletteDefault;";
  inner += "        console.log('[Settings] Thermal palette: ' + thermalPalette);";
  inner += "      } else {";
  inner += "        console.log('[Settings] Thermal palette not found, using default: ' + thermalPalette);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalEWMAFactor !== undefined) {";
  inner += "        thermalEWMAFactor = settings.settings.thermal.ui.thermalEWMAFactor;";
  inner += "        console.log('[Settings] Thermal EWMA factor: ' + thermalEWMAFactor);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalInterpolationEnabled !== undefined) {";
  inner += "        thermalInterpolationEnabled = settings.settings.thermal.ui.thermalInterpolationEnabled;";
  inner += "        console.log('[Settings] Thermal interpolation enabled: ' + thermalInterpolationEnabled);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalInterpolationSteps !== undefined) {";
  inner += "        thermalInterpolationSteps = settings.settings.thermal.ui.thermalInterpolationSteps;";
  inner += "        console.log('[Settings] Thermal interpolation steps: ' + thermalInterpolationSteps);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalInterpolationBufferSize !== undefined) {";
  inner += "        thermalInterpolationBufferSize = settings.settings.thermal.ui.thermalInterpolationBufferSize;";
  inner += "        console.log('[Settings] Thermal interpolation buffer size: ' + thermalInterpolationBufferSize);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalWebClientQuality !== undefined) {";
  inner += "        thermalWebClientQuality = settings.settings.thermal.ui.thermalWebClientQuality;";
  inner += "        console.log('[Settings] Thermal web client quality: ' + thermalWebClientQuality);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.thermal && settings.settings.thermal.ui && settings.settings.thermal.ui.thermalTransitionMs !== undefined) {";
  inner += "        thermalTransitionMs = settings.settings.thermal.ui.thermalTransitionMs;";
  inner += "        console.log('[Settings] Thermal transition ms: ' + thermalTransitionMs);";
  inner += "      }";
  inner += "      if (settings.settings && settings.settings.debug) {";
  inner += "        debugSettings.sensorsFrame = settings.settings.debug.sensorsFrame || 0;";
  inner += "        debugSettings.http = settings.settings.debug.http || 0;";
  inner += "        debugSettings.sse = settings.settings.debug.sse || 0;";
  inner += "        console.log('[Settings] Debug settings loaded:', debugSettings);";
  inner += "      }";
  inner += "      initThermalColorMap();";
  inner += "      settingsLoaded = true;";
  inner += "      console.log('[Settings] Basic sensor settings applied');";
  inner += "      return settings;";
  inner += "    })";
  inner += "    .catch(function(error) {";
  inner += "      console.warn('[Settings] Failed to load, using defaults:', error);";
  inner += "      settingsLoaded = true;";
  inner += "      return {};";
  inner += "    });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 2: Settings ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 2B: Thermal Color Mapping
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 2B: Color mapping start');}catch(_){}";
  inner += "function initThermalColorMap() {";
  inner += "  console.log('[Thermal] Initializing color map for palette: ' + thermalPalette);";
  inner += "  if (thermalPalette === 'iron') {";
  inner += "    thermalColorMap = getIronColorMap();";
  inner += "  } else if (thermalPalette === 'rainbow') {";
  inner += "    thermalColorMap = getRainbowColorMap();";
  inner += "  } else if (thermalPalette === 'hot') {";
  inner += "    thermalColorMap = getHotColorMap();";
  inner += "  } else if (thermalPalette === 'coolwarm') {";
  inner += "    thermalColorMap = getCoolwarmColorMap();";
  inner += "  } else {";
  inner += "    thermalColorMap = getGrayscaleColorMap();";
  inner += "  }";
  inner += "  console.log('[Thermal] Color map initialized with ' + Object.keys(thermalColorMap).length + ' colors');";
  inner += "}";
  inner += "";
  inner += "function getIronColorMap() {";
  inner += "  var colors = {};";
  inner += "  for (var i = 0; i <= 255; i++) {";
  inner += "    var r, g, b;";
  inner += "    if (i < 85) {";
  inner += "      r = i * 3; g = 0; b = 0;";
  inner += "    } else if (i < 170) {";
  inner += "      r = 255; g = (i - 85) * 3; b = 0;";
  inner += "    } else {";
  inner += "      r = 255; g = 255; b = (i - 170) * 3;";
  inner += "    }";
  inner += "    colors[i] = 'rgb(' + Math.min(255, r) + ',' + Math.min(255, g) + ',' + Math.min(255, b) + ')';";
  inner += "  }";
  inner += "  return colors;";
  inner += "}";
  inner += "";
  inner += "function getRainbowColorMap() {";
  inner += "  var colors = {};";
  inner += "  for (var i = 0; i <= 255; i++) {";
  inner += "    var hue = (i / 255) * 240;";
  inner += "    var rgb = hslToRgb(hue / 360, 1, 0.5);";
  inner += "    colors[i] = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';";
  inner += "  }";
  inner += "  return colors;";
  inner += "}";
  inner += "";
  inner += "function getHotColorMap() {";
  inner += "  var colors = {};";
  inner += "  for (var i = 0; i <= 255; i++) {";
  inner += "    var r = Math.min(255, i * 1.5);";
  inner += "    var g = Math.max(0, Math.min(255, (i - 85) * 1.5));";
  inner += "    var b = Math.max(0, Math.min(255, (i - 170) * 1.5));";
  inner += "    colors[i] = 'rgb(' + Math.round(r) + ',' + Math.round(g) + ',' + Math.round(b) + ')';";
  inner += "  }";
  inner += "  return colors;";
  inner += "}";
  inner += "";
  inner += "function getCoolwarmColorMap() {";
  inner += "  var colors = {};";
  inner += "  for (var i = 0; i <= 255; i++) {";
  inner += "    var t = i / 255;";
  inner += "    var r, g, b;";
  inner += "    if (t < 0.5) {";
  inner += "      r = Math.round(255 * (0.23 + 0.77 * (1 - 2 * t)));";
  inner += "      g = Math.round(255 * (0.3 + 0.7 * (1 - 2 * t)));";
  inner += "      b = Math.round(255 * (0.75 + 0.25 * (1 - 2 * t)));";
  inner += "    } else {";
  inner += "      r = Math.round(255 * (0.7 + 0.3 * (2 * t - 1)));";
  inner += "      g = Math.round(255 * (0.15 + 0.35 * (2 * t - 1)));";
  inner += "      b = Math.round(255 * (0.1 + 0.1 * (2 * t - 1)));";
  inner += "    }";
  inner += "    colors[i] = 'rgb(' + r + ',' + g + ',' + b + ')';";
  inner += "  }";
  inner += "  return colors;";
  inner += "}";
  inner += "";
  inner += "function getGrayscaleColorMap() {";
  inner += "  var colors = {};";
  inner += "  for (var i = 0; i <= 255; i++) {";
  inner += "    colors[i] = 'rgb(' + i + ',' + i + ',' + i + ')';";
  inner += "  }";
  inner += "  return colors;";
  inner += "}";
  inner += "";
  inner += "function hslToRgb(h, s, l) {";
  inner += "  var r, g, b;";
  inner += "  if (s === 0) {";
  inner += "    r = g = b = l;";
  inner += "  } else {";
  inner += "    var hue2rgb = function(p, q, t) {";
  inner += "      if (t < 0) t += 1;";
  inner += "      if (t > 1) t -= 1;";
  inner += "      if (t < 1/6) return p + (q - p) * 6 * t;";
  inner += "      if (t < 1/2) return q;";
  inner += "      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;";
  inner += "      return p;";
  inner += "    };";
  inner += "    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;";
  inner += "    var p = 2 * l - q;";
  inner += "    r = hue2rgb(p, q, h + 1/3);";
  inner += "    g = hue2rgb(p, q, h);";
  inner += "    b = hue2rgb(p, q, h - 1/3);";
  inner += "  }";
  inner += "  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 2B: Color mapping ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 3: Core Sensor Functions
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 3: Core functions start');}catch(_){}";
  inner += "function controlSensor(sensor, action) {";
  inner += "  var command = sensor + action;";
  inner += "  return fetch('/api/cli', {";
  inner += "    method: 'POST',";
  inner += "    headers: {'Content-Type': 'application/x-www-form-urlencoded'},";
  inner += "    body: 'cmd=' + encodeURIComponent(command)";
  inner += "  }).then(function(response) {";
  inner += "    return response.text();";
  inner += "  }).then(function(result) {";
  inner += "    console.log('[Sensors] control result', result);";
  inner += "    return result;";
  inner += "  }).catch(function(error) {";
  inner += "    console.error('Sensor control error:', error);";
  inner += "    throw error;";
  inner += "  });";
  inner += "}";
  inner += "";
  inner += "function readSensor(sensor) {";
  inner += "  if (String(sensor) === 'imu') {";
  inner += "    var url = '/api/sensors?sensor=imu&ts=' + Date.now();";
  inner += "    return fetch(url, {cache: 'no-store'})";
  inner += "      .then(function(r) { return r.json(); })";
  inner += "      .then(function(j) {";
  inner += "        var el = document.getElementById('gyro-data');";
  inner += "        if (el) {";
  inner += "          if (j && j.valid) {";
  inner += "            var ax = j.accel.x.toFixed(2), ay = j.accel.y.toFixed(2), az = j.accel.z.toFixed(2);";
  inner += "            var gx = j.gyro.x.toFixed(2), gy = j.gyro.y.toFixed(2), gz = j.gyro.z.toFixed(2);";
  inner += "            var yw = j.ori.yaw.toFixed(1), pt = j.ori.pitch.toFixed(1), rl = j.ori.roll.toFixed(1);";
  inner += "            var tc = Number(j.temp).toFixed(0);";
  inner += "            el.innerHTML = '<div class=\\'imu-grid\\'>' +";
  inner += "              '<div class=\\'imu-label\\'>Acceleration (m/s\\u00B2)</div><div class=\\'imu-val\\'>' + ax + ', ' + ay + ', ' + az + '</div>' +";
  inner += "              '<div class=\\'imu-label\\'>Gyroscope (rad/s)</div><div class=\\'imu-val\\'>' + gx + ', ' + gy + ', ' + gz + '</div>' +";
  inner += "              '<div class=\\'imu-label\\'>Orientation YPR (deg)</div><div class=\\'imu-val\\'>' + yw + ', ' + pt + ', ' + rl + '</div>' +";
  inner += "              '<div class=\\'imu-label\\'>Temperature</div><div class=\\'imu-val\\'>' + tc + '\\u00B0C</div>' +";
  inner += "              '</div>';";
  inner += "          } else {";
  inner += "            el.textContent = 'IMU not ready';";
  inner += "          }";
  inner += "        }";
  inner += "        return j;";
  inner += "      }).catch(function(e) {";
  inner += "        console.error('[Sensors] IMU read error', e);";
  inner += "        throw e;";
  inner += "      });";
  inner += "  }";
  inner += "  return Promise.resolve('Sensor read placeholder');";
  inner += "}";
  inner += "";
  inner += "function getSensorDataId(sensor) {";
  inner += "  if (sensor.indexOf('imu') !== -1) return 'gyro-data';";
  inner += "  if (sensor.indexOf('tof') !== -1) return 'tof-data';";
  inner += "  if (sensor.indexOf('thermal') !== -1) return 'thermal-data';";
  inner += "  return sensor + '-data';";
  inner += "}";
  inner += "";
  inner += "function startSensorPolling(sensor) {";
  inner += "  if (sensorIntervals[sensor]) return;";
  inner += "  if (sensor === 'thermal') {";
  inner += "    if (typeof startThermalPolling === 'function') {";
  inner += "      startThermalPolling();";
  inner += "    }";
  inner += "    return;";
  inner += "  } else if (sensor === 'tof') {";
  inner += "    if (typeof startToFPolling === 'function') {";
  inner += "      startToFPolling();";
  inner += "    }";
  inner += "    return;";
  inner += "  } else {";
  inner += "    readSensor(sensor);";
  inner += "    sensorIntervals[sensor] = setInterval(function() {";
  inner += "      readSensor(sensor);";
  inner += "    }, sensor === 'imu' ? 200 : 500);";
  inner += "  }";
  inner += "}";
  inner += "";
  inner += "function stopSensorPolling(sensor) {";
  inner += "  if (sensorIntervals[sensor]) {";
  inner += "    clearInterval(sensorIntervals[sensor]);";
  inner += "    delete sensorIntervals[sensor];";
  inner += "  }";
  inner += "  if (sensor === 'thermal') {";
  inner += "    if (typeof stopThermalPolling === 'function') {";
  inner += "      stopThermalPolling();";
  inner += "    }";
  inner += "  } else if (sensor === 'tof') {";
  inner += "    if (typeof stopToFPolling === 'function') {";
  inner += "      stopToFPolling();";
  inner += "    }";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 3: Core functions ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 4: Thermal Functions
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 4: Thermal functions start');}catch(_){}";
  inner += "function updateThermalVisualization() {";
  inner += "  console.log('[Thermal] Fetching data...');";
  inner += "  var url = '/api/sensors?sensor=thermal&ts=' + Date.now();";
  inner += "  debugLog('http', 'GET ' + url);";
  inner += "  fetch(url, { cache: 'no-store' })";
  inner += "    .then(function(response) {";
  inner += "      console.log('[Thermal] Response status:', response.status);";
  inner += "      if (!response.ok) {";
  inner += "        throw new Error('HTTP ' + response.status);";
  inner += "      }";
  inner += "      return response.json();";
  inner += "    })";
  inner += "    .then(function(data) {";
  inner += "      console.log('[Thermal] Data received:', data);";
  inner += "      if (data && data.v && data.f) {";
  inner += "        console.log('[Thermal] Valid frame data, length:', data.f.length);";
  inner += "        var frame = data.f;";
  inner += "        var min = data.mn || 0;";
  inner += "        var max = data.mx || 100;";
  inner += "        var avg = frame.reduce(function(a, b) { return a + b; }, 0) / frame.length;";
  inner += "        debugLog('sensorsFrame', 'Thermal frame seq:' + data.seq + ' min:' + min.toFixed(1) + ' max:' + max.toFixed(1) + ' avg:' + avg.toFixed(1));";
  inner += "        document.getElementById('thermalMin').textContent = min.toFixed(1);";
  inner += "        document.getElementById('thermalMax').textContent = max.toFixed(1);";
  inner += "        document.getElementById('thermalAvg').textContent = avg.toFixed(1);";
  inner += "        var grid = document.getElementById('thermalGrid');";
  inner += "        if (grid && grid.children.length === 768) {";
  inner += "          console.log('[Thermal] Updating grid with', grid.children.length, 'pixels');";
  inner += "          var processedFrame = frame.slice();";
  inner += "          if (thermalPreviousFrame && thermalEWMAFactor > 0) {";
  inner += "            for (var i = 0; i < 768; i++) {";
  inner += "              processedFrame[i] = thermalEWMAFactor * frame[i] + (1 - thermalEWMAFactor) * thermalPreviousFrame[i];";
  inner += "            }";
  inner += "            console.log('[Thermal] Applied EWMA smoothing with factor:', thermalEWMAFactor);";
  inner += "          }";
  inner += "          thermalPreviousFrame = frame.slice();";
  inner += "          for (var i = 0; i < 768; i++) {";
  inner += "            var temp = processedFrame[i];";
  inner += "            var normalized = (temp - min) / (max - min);";
  inner += "            normalized = Math.max(0, Math.min(1, normalized));";
  inner += "            var colorIndex = Math.round(255 * normalized);";
  inner += "            var pixel = grid.children[i];";
  inner += "            if (thermalTransitionMs > 0) {";
  inner += "              pixel.style.transition = 'background-color ' + thermalTransitionMs + 'ms ease-in-out';";
  inner += "            }";
  inner += "            pixel.style.backgroundColor = thermalColorMap[colorIndex] || 'rgb(128,128,128)';";
  inner += "          }";
  inner += "          console.log('[Thermal] Grid updated successfully with EWMA and transitions');";
  inner += "        } else {";
  inner += "          console.warn('[Thermal] Grid not found or wrong size:', grid ? grid.children.length : 'null');";
  inner += "        }";
  inner += "      } else {";
  inner += "        console.warn('[Thermal] Invalid data format - v:', data.v, 'f length:', data.f ? data.f.length : 'null');";
  inner += "      }";
  inner += "    })";
  inner += "    .catch(function(error) {";
  inner += "      console.error('Thermal fetch error:', error);";
  inner += "    });";
  inner += "}";
  inner += "";
  inner += "function startThermalPolling() {";
  inner += "  if (thermalPollingInterval) return;";
  inner += "  updateThermalVisualization();";
  inner += "  thermalPollingInterval = setInterval(function() {";
  inner += "    updateThermalVisualization();";
  inner += "  }, thermalPollingMs);";
  inner += "}";
  inner += "";
  inner += "function stopThermalPolling() {";
  inner += "  if (thermalPollingInterval) {";
  inner += "    clearInterval(thermalPollingInterval);";
  inner += "    thermalPollingInterval = null;";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 4: Thermal functions ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 5: ToF Functions
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 5: ToF functions start');}catch(_){}";
  inner += "function updateToFObjects() {";
  inner += "  var url = '/api/sensors?sensor=tof&ts=' + Date.now();";
  inner += "  debugLog('http', 'GET ' + url);";
  inner += "  fetch(url, { cache: 'no-store' })";
  inner += "    .then(function(response) {";
  inner += "      if (!response.ok) {";
  inner += "        throw new Error('HTTP ' + response.status);";
  inner += "      }";
  inner += "      return response.json();";
  inner += "    })";
  inner += "    .then(function(data) {";
  inner += "      if (data && data.objects) {";
  inner += "        debugLog('sensorsFrame', 'ToF objects: ' + JSON.stringify(data.objects.map(function(obj, i) { return {id: i+1, detected: obj.detected, valid: obj.valid, distance: obj.distance_cm}; })));";
  inner += "        var validObjects = 0;";
  inner += "        for (var i = 0; i < 4; i++) {";
  inner += "          var obj = data.objects[i];";
  inner += "          var barElement = document.getElementById('distance-bar-' + (i + 1));";
  inner += "          var infoElement = document.getElementById('object-info-' + (i + 1));";
  inner += "          var state = tofObjectStates[i];";
  inner += "          if (obj && obj.detected && obj.valid) {";
  inner += "            var distance_mm = obj.distance_mm || 0;";
  inner += "            var distance_cm = obj.distance_cm || 0;";
  inner += "            if (!state.lastDistance || Math.abs(state.lastDistance - distance_mm) < 200) {";
  inner += "              state.stableCount = (state.stableCount || 0) + 1;";
  inner += "              state.lastDistance = distance_mm;";
  inner += "              if (state.stableCount >= tofStabilityThreshold) {";
  inner += "                validObjects++;";
  inner += "                var percentage = Math.min(100, (distance_mm / tofMaxDistance) * 100);";
  inner += "                if (tofTransitionMs > 0) {";
  inner += "                  barElement.style.transition = 'width ' + tofTransitionMs + 'ms ease-in-out, background-color ' + tofTransitionMs + 'ms ease-in-out';";
  inner += "                }";
  inner += "                barElement.style.width = percentage + '%';";
  inner += "                barElement.className = 'distance-bar';";
  inner += "                infoElement.textContent = distance_cm.toFixed(1) + ' cm';";
  inner += "                state.displayed = true;";
  inner += "              }";
  inner += "            } else {";
  inner += "              state.stableCount = 1;";
  inner += "              state.lastDistance = distance_mm;";
  inner += "            }";
  inner += "          } else {";
  inner += "            state.stableCount = 0;";
  inner += "            if (state.displayed) {";
  inner += "              state.missCount = (state.missCount || 0) + 1;";
  inner += "              if (state.missCount >= tofStabilityThreshold) {";
  inner += "                if (tofTransitionMs > 0) {";
  inner += "                  barElement.style.transition = 'width ' + tofTransitionMs + 'ms ease-in-out, background-color ' + tofTransitionMs + 'ms ease-in-out';";
  inner += "                }";
  inner += "                barElement.style.width = '0%';";
  inner += "                barElement.className = 'distance-bar invalid';";
  inner += "                infoElement.textContent = '---';";
  inner += "                state.displayed = false;";
  inner += "                state.missCount = 0;";
  inner += "              }";
  inner += "            } else {";
  inner += "              if (tofTransitionMs > 0) {";
  inner += "                barElement.style.transition = 'width ' + tofTransitionMs + 'ms ease-in-out, background-color ' + tofTransitionMs + 'ms ease-in-out';";
  inner += "              }";
  inner += "              barElement.style.width = '0%';";
  inner += "              barElement.className = 'distance-bar invalid';";
  inner += "              infoElement.textContent = '---';";
  inner += "            }";
  inner += "          }";
  inner += "        }";
  inner += "        var summary = document.getElementById('tof-objects-summary');";
  inner += "        if (summary) {";
  inner += "          summary.textContent = validObjects + ' object(s) detected';";
  inner += "        }";
  inner += "      }";
  inner += "    })";
  inner += "    .catch(function(error) {";
  inner += "      console.error('ToF fetch error:', error);";
  inner += "    });";
  inner += "}";
  inner += "";
  inner += "function startToFPolling() {";
  inner += "  if (tofPollingInterval) return;";
  inner += "  console.log('[ToF] Starting polling with interval:', tofPollingMs + 'ms, stability threshold:', tofStabilityThreshold, 'max distance:', tofMaxDistance + 'mm');";
  inner += "  var d = document.getElementById('tof-objects-display');";
  inner += "  if (d) {";
  inner += "    d.style.display = 'block';";
  inner += "  }";
  inner += "  updateToFObjects();";
  inner += "  tofPollingInterval = setInterval(function() {";
  inner += "    updateToFObjects();";
  inner += "  }, tofPollingMs);";
  inner += "}";
  inner += "";
  inner += "function stopToFPolling() {";
  inner += "  if (tofPollingInterval) {";
  inner += "    clearInterval(tofPollingInterval);";
  inner += "    tofPollingInterval = null;";
  inner += "  }";
  inner += "  var d = document.getElementById('tof-objects-display');";
  inner += "  if (d) {";
  inner += "    d.style.display = 'none';";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 5: ToF functions ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 6: Device Visibility
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 6: Device visibility start');}catch(_){}";
  inner += "function updateSensorCardVisibility() {";
  inner += "  fetch('/api/devices')";
  inner += "    .then(function(r) { return r.json(); })";
  inner += "    .then(function(data) {";
  inner += "      var devices = data.devices || [];";
  inner += "      var deviceNames = devices.map(function(d) { return d.name; });";
  inner += "      var hasIMU = deviceNames.includes('BNO055');";
  inner += "      var hasThermal = deviceNames.includes('MLX90640');";
  inner += "      var hasToF = deviceNames.includes('VL53L4CX');";
  inner += "      var imuCard = document.getElementById('sensor-card-imu');";
  inner += "      var thermalCard = document.getElementById('sensor-card-thermal');";
  inner += "      var tofCard = document.getElementById('sensor-card-tof');";
  inner += "      if (imuCard) imuCard.style.display = hasIMU ? '' : 'none';";
  inner += "      if (thermalCard) thermalCard.style.display = hasThermal ? '' : 'none';";
  inner += "      if (tofCard) tofCard.style.display = hasToF ? '' : 'none';";
  inner += "    })";
  inner += "    .catch(function(e) {";
  inner += "      console.warn('Device visibility update failed:', e);";
  inner += "    });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 6: Device visibility ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 7A: Helper Functions
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 7A: Helper functions start');}catch(_){}";
  inner += "function bindButton(id, fn) {";
  inner += "  var el = document.getElementById(id);";
  inner += "  if (el) {";
  inner += "    el.addEventListener('click', fn);";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 7A: Helper functions ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 7B: Grid Initialization
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 7B: Grid init start');}catch(_){}";
  inner += "function initThermalGrid() {";
  inner += "  var grid = document.getElementById('thermalGrid');";
  inner += "  if (grid && grid.children.length !== 768) {";
  inner += "    for (var i = 0; i < 768; i++) {";
  inner += "      var cell = document.createElement('div');";
  inner += "      cell.className = 'thermal-pixel';";
  inner += "      cell.style.backgroundColor = 'rgb(128,128,128)';";
  inner += "      grid.appendChild(cell);";
  inner += "    }";
  inner += "  }";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 7B: Grid init ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 7C: Button Handlers
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 7C: Button handlers start');}catch(_){}";
  inner += "function setupButtonHandlers() {";
  inner += "  bindButton('btn-imu-start', function() {";
  inner += "    controlSensor('imu', 'start').then(function() {";
  inner += "      startSensorPolling('imu');";
  inner += "    });";
  inner += "  });";
  inner += "  bindButton('btn-imu-stop', function() {";
  inner += "    controlSensor('imu', 'stop').then(function() {";
  inner += "      stopSensorPolling('imu');";
  inner += "    });";
  inner += "  });";
  inner += "  bindButton('btn-thermal-start', function() {";
  inner += "    controlSensor('thermal', 'start').then(function() {";
  inner += "      startSensorPolling('thermal');";
  inner += "    });";
  inner += "  });";
  inner += "  bindButton('btn-thermal-stop', function() {";
  inner += "    controlSensor('thermal', 'stop').then(function() {";
  inner += "      stopSensorPolling('thermal');";
  inner += "    });";
  inner += "  });";
  inner += "  bindButton('btn-tof-start', function() {";
  inner += "    controlSensor('tof', 'start').then(function() {";
  inner += "      startSensorPolling('tof');";
  inner += "    });";
  inner += "  });";
  inner += "  bindButton('btn-tof-stop', function() {";
  inner += "    controlSensor('tof', 'stop').then(function() {";
  inner += "      stopSensorPolling('tof');";
  inner += "    });";
  inner += "  });";
  inner += "}";
  inner += "try{console.log('[SENSORS] Chunk 7C: Button handlers ready');}catch(_){}";
  inner += "</script>";
  
  // JavaScript - Chunk 7D: Main Initialization
  inner += "<script>";
  inner += "try{console.log('[SENSORS] Chunk 7D: Main init start');}catch(_){}";
  inner += "document.addEventListener('DOMContentLoaded', function() {";
  inner += "  console.log('[SENSORS] DOMContentLoaded');";
  inner += "  loadSensorSettings().then(function() {";
  inner += "    updateSensorCardVisibility();";
  inner += "  });";
  inner += "  setupButtonHandlers();";
  inner += "  initThermalGrid();";
  inner += "});";
  inner += "try{console.log('[SENSORS] Chunk 7D: Main init ready');}catch(_){}";
  inner += "</script>";

  return inner;
}

String getSensorsPage(const String& username) {
  return htmlShellWithNav(username, "sensors", getSensorsContent());
}

#endif // WEB_SENSORS_H
